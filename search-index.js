var searchIndex={};
searchIndex["actor"] = {"doc":"","i":[[3,"ActorID","actor","Identifier for Actors, includes builtin and initialized…",null,null],[12,"0","","",0,null],[3,"ActorState","","State of all actor implementations",null,null],[12,"code","","",1,null],[12,"state","","",1,null],[12,"balance","","",1,null],[12,"sequence","","",1,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor methods",null,null],[3,"SYSTEM_ACTOR_CODE_ID","","",null,null],[3,"INIT_ACTOR_CODE_ID","","",null,null],[3,"CRON_ACTOR_CODE_ID","","",null,null],[3,"ACCOUNT_ACTOR_CODE_ID","","",null,null],[3,"POWER_ACTOR_CODE_ID","","",null,null],[3,"MINER_ACTOR_CODE_ID","","",null,null],[3,"MARKET_ACTOR_CODE_ID","","",null,null],[3,"PAYCH_ACTOR_CODE_ID","","",null,null],[3,"MULTISIG_ACTOR_CODE_ID","","",null,null],[3,"REWARD_ACTOR_CODE_ID","","",null,null],[3,"CALLER_TYPES_SIGNABLE","","",null,null],[3,"SYSTEM_ACTOR_ADDR","","",null,null],[3,"INIT_ACTOR_ADDR","","",null,null],[3,"REWARD_ACTOR_ADDR","","",null,null],[3,"CRON_ACTOR_ADDR","","",null,null],[3,"STORAGE_POWER_ACTOR_ADDR","","",null,null],[3,"STORAGE_MARKET_ACTOR_ADDR","","",null,null],[3,"BURNT_FUNDS_ACTOR_ADDR","","",null,null],[0,"account","","",null,null],[3,"State","actor::account","State includes the address for the actor",null,null],[12,"address","","",2,null],[3,"Actor","","Account Actor",null,null],[4,"Method","","Account actor methods available",null,null],[13,"Constructor","","",3,null],[13,"PubkeyAddress","","",3,null],[0,"cron","actor","",null,null],[3,"Entry","actor::cron","",null,null],[12,"receiver","","",4,null],[12,"method_num","","",4,null],[3,"State","","Cron actor state which holds entries to call during epoch…",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to…",5,null],[3,"ConstructorParams","","Constructor parameters for Cron actor, contains entries of…",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to…",6,null],[3,"Actor","","Cron actor",null,null],[4,"Method","","Cron actor methods available",null,null],[13,"Constructor","","",7,null],[13,"EpochTick","","",7,null],[0,"init","actor","",null,null],[3,"ConstructorParams","actor::init","Constructor parameters",null,null],[12,"network_name","","",8,null],[3,"ExecParams","","Exec Params",null,null],[12,"code_cid","","",9,null],[12,"constructor_params","","",9,null],[3,"ExecReturn","","Exec Return value",null,null],[12,"id_address","","ID based address for created actor",10,null],[12,"robust_address","","Reorg safe address for actor",10,null],[3,"State","","State is reponsible for creating",null,null],[3,"Actor","","Init actor",null,null],[4,"Method","","Init actor methods available",null,null],[13,"Constructor","","",11,null],[13,"Exec","","",11,null],[0,"miner","actor","",null,null],[3,"MinerInfo","actor::miner","Static information about miner",null,null],[3,"State","","Miner actor state",null,null],[12,"slashed_at","","The height at which this miner was slashed at.",12,null],[12,"sectors","","Sectors this miner has committed",12,null],[12,"info","","Contains static info about this miner",12,null],[3,"Actor","","Miner Actor",null,null],[0,"multisig","actor","",null,null],[3,"State","actor::multisig","Multisig actor state",null,null],[12,"signers","","",13,null],[12,"num_approvals_threshold","","",13,null],[12,"next_tx_id","","",13,null],[12,"initial_balance","","",13,null],[12,"start_epoch","","",13,null],[12,"unlock_duration","","",13,null],[12,"pending_txs","","",13,null],[3,"TxnID","","Transaction ID type",null,null],[12,"0","","",14,null],[3,"Transaction","","Transaction type used in multisig actor",null,null],[12,"to","","",15,null],[12,"value","","",15,null],[12,"method","","",15,null],[12,"params","","",15,null],[12,"approved","","",15,null],[3,"ConstructorParams","","Constructor parameters for multisig actor",null,null],[12,"signers","","",16,null],[12,"num_approvals_threshold","","",16,null],[12,"unlock_duration","","",16,null],[3,"ProposeParams","","Propose method call parameters",null,null],[12,"to","","",17,null],[12,"value","","",17,null],[12,"method","","",17,null],[12,"params","","",17,null],[3,"TxnIDParams","","Propose method call parameters",null,null],[12,"id","","",18,null],[3,"AddSignerParams","","Add signer params",null,null],[12,"signer","","",19,null],[12,"increase","","",19,null],[3,"RemoveSignerParams","","Remove signer params",null,null],[12,"signer","","",20,null],[12,"decrease","","",20,null],[3,"SwapSignerParams","","Swap signer multisig method params",null,null],[12,"from","","",21,null],[12,"to","","",21,null],[3,"ChangeNumApprovalsThresholdParams","","Propose method call parameters",null,null],[12,"new_threshold","","",22,null],[3,"Actor","","Multisig Actor",null,null],[4,"Method","","Multisig actor methods available",null,null],[13,"Constructor","","",23,null],[13,"Propose","","",23,null],[13,"Approve","","",23,null],[13,"Cancel","","",23,null],[13,"AddSigner","","",23,null],[13,"RemoveSigner","","",23,null],[13,"SwapSigner","","",23,null],[13,"ChangeNumApprovalsThreshold","","",23,null],[0,"power","actor","",null,null],[3,"State","actor::power","Storage power actor state",null,null],[3,"Actor","","Storage Power Actor",null,null],[4,"Method","","Storage power actor methods available",null,null],[13,"Constructor","","Constructor for Storage Power Actor",24,null],[13,"AddBalance","","",24,null],[13,"WithdrawBalance","","",24,null],[13,"CreateMiner","","",24,null],[13,"DeleteMiner","","",24,null],[13,"OnSectorProveCommit","","",24,null],[13,"OnSectorTerminate","","",24,null],[13,"OnSectorTemporaryFaultEffectiveBegin","","",24,null],[13,"OnSectorTemporaryFaultEffectiveEnd","","",24,null],[13,"OnSectorModifyWeightDesc","","",24,null],[13,"OnMinerWindowedPoStSuccess","","",24,null],[13,"OnMinerWindowedPoStFailure","","",24,null],[13,"EnrollCronEvent","","",24,null],[13,"ReportConsensusFault","","",24,null],[13,"OnEpochTickEnd","","",24,null],[0,"reward","actor","",null,null],[3,"Reward","actor::reward","",null,null],[12,"start_epoch","","",25,null],[12,"value","","",25,null],[12,"release_rate","","",25,null],[12,"amount_withdrawn","","",25,null],[3,"State","","Reward actor state",null,null],[12,"reward_map","","",26,null],[12,"reward_total","","",26,null],[3,"Actor","","Reward Actor",null,null],[4,"Method","","Reward actor methods available",null,null],[13,"Constructor","","",27,null],[13,"AwardBlockReward","","",27,null],[13,"WithdrawReward","","",27,null],[17,"FIRST_NON_SINGLETON_ADDR","actor","Defines first available ID address after builtin actors",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"vzip","","",28,[[],["v"]]],[11,"clear","","",28,[[["self"]]]],[11,"initialize","","",28,[[]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","actor::account","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","actor::cron","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"clear","","",6,[[["self"]]]],[11,"initialize","","",6,[[]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"vzip","","",48,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"clear","","",5,[[["self"]]]],[11,"initialize","","",5,[[]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","actor::init","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"vzip","","",49,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"vzip","","",50,[[],["v"]]],[11,"from","actor::miner","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"from","actor::multisig","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"clear","","",14,[[["self"]]]],[11,"initialize","","",14,[[]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","actor::power","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"from","actor::reward","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"vzip","","",26,[[],["v"]]],[11,"deref","actor","",28,[[["self"]]]],[11,"add_assign","","",0,[[["self"],["u64"]]]],[11,"default","","",28,[[],["serialized"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",28,[[["s"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"clone","","",28,[[["self"]],["serialized"]]],[11,"clone","","",0,[[["self"]],["actorid"]]],[11,"clone","","",1,[[["self"]],["actorstate"]]],[11,"deserialize","","",1,[[["d"]],[["result",["actorstate"]],["actorstate"]]]],[11,"deserialize","","",0,[[["__d"]],[["actorid"],["result",["actorid"]]]]],[11,"deserialize","","",28,[[["d"]],[["result",["serialized"]],["serialized"]]]],[11,"eq","","",1,[[["self"],["actorstate"]],["bool"]]],[11,"ne","","",1,[[["self"],["actorstate"]],["bool"]]],[11,"eq","","",28,[[["serialized"],["self"]],["bool"]]],[11,"ne","","",28,[[["serialized"],["self"]],["bool"]]],[11,"eq","","",0,[[["actorid"],["self"]],["bool"]]],[11,"ne","","",0,[[["actorid"],["self"]],["bool"]]],[11,"clone","actor::multisig","",14,[[["self"]],["txnid"]]],[11,"clone","","",15,[[["self"]],["transaction"]]],[11,"default","actor::cron","",5,[[],["state"]]],[11,"default","","",6,[[],["constructorparams"]]],[11,"default","actor::multisig","",14,[[],["txnid"]]],[11,"eq","","",15,[[["self"],["transaction"]],["bool"]]],[11,"ne","","",15,[[["self"],["transaction"]],["bool"]]],[11,"deref","actor","",29,[[["self"]],["cid"]]],[11,"deref","","",30,[[["self"]],["cid"]]],[11,"deref","","",31,[[["self"]],["cid"]]],[11,"deref","","",32,[[["self"]],["cid"]]],[11,"deref","","",33,[[["self"]],["cid"]]],[11,"deref","","",34,[[["self"]],["cid"]]],[11,"deref","","",35,[[["self"]],["cid"]]],[11,"deref","","",36,[[["self"]],["cid"]]],[11,"deref","","",37,[[["self"]],["cid"]]],[11,"deref","","",38,[[["self"]],["cid"]]],[11,"deref","","",39,[[["self"]]]],[11,"deref","","",40,[[["self"]],["address"]]],[11,"deref","","",41,[[["self"]],["address"]]],[11,"deref","","",42,[[["self"]],["address"]]],[11,"deref","","",43,[[["self"]],["address"]]],[11,"deref","","",44,[[["self"]],["address"]]],[11,"deref","","",45,[[["self"]],["address"]]],[11,"deref","","",46,[[["self"]],["address"]]],[11,"fmt","actor::multisig","",15,[[["formatter"],["self"]],["result"]]],[11,"initialize","actor","",29,[[["self"]]]],[11,"initialize","","",30,[[["self"]]]],[11,"initialize","","",31,[[["self"]]]],[11,"initialize","","",32,[[["self"]]]],[11,"initialize","","",33,[[["self"]]]],[11,"initialize","","",34,[[["self"]]]],[11,"initialize","","",35,[[["self"]]]],[11,"initialize","","",36,[[["self"]]]],[11,"initialize","","",37,[[["self"]]]],[11,"initialize","","",38,[[["self"]]]],[11,"initialize","","",39,[[["self"]]]],[11,"initialize","","",40,[[["self"]]]],[11,"initialize","","",41,[[["self"]]]],[11,"initialize","","",42,[[["self"]]]],[11,"initialize","","",43,[[["self"]]]],[11,"initialize","","",44,[[["self"]]]],[11,"initialize","","",45,[[["self"]]]],[11,"initialize","","",46,[[["self"]]]],[11,"from_i64","actor::account","",3,[[["i64"]],["option"]]],[11,"from_u64","","",3,[[["u64"]],["option"]]],[11,"from_i64","actor::cron","",7,[[["i64"]],["option"]]],[11,"from_u64","","",7,[[["u64"]],["option"]]],[11,"from_i64","actor::init","",11,[[["i64"]],["option"]]],[11,"from_u64","","",11,[[["u64"]],["option"]]],[11,"from_i64","actor::multisig","",23,[[["i64"]],["option"]]],[11,"from_u64","","",23,[[["u64"]],["option"]]],[11,"from_i64","actor::power","",24,[[["i64"]],["option"]]],[11,"from_u64","","",24,[[["u64"]],["option"]]],[11,"from_i64","actor::reward","",27,[[["i64"]],["option"]]],[11,"from_u64","","",27,[[["u64"]],["option"]]],[11,"serialize","actor::account","",2,[[["s"],["self"]],["result"]]],[11,"serialize","actor::cron","",5,[[["s"],["self"]],["result"]]],[11,"serialize","","",4,[[["s"],["self"]],["result"]]],[11,"serialize","","",6,[[["s"],["self"]],["result"]]],[11,"serialize","actor::init","",8,[[["s"],["self"]],["result"]]],[11,"serialize","","",9,[[["s"],["self"]],["result"]]],[11,"serialize","","",10,[[["s"],["self"]],["result"]]],[11,"serialize","","",50,[[["s"],["self"]],["result"]]],[11,"serialize","actor::multisig","",13,[[["s"],["self"]],["result"]]],[11,"serialize","","",14,[[["s"],["self"]],["result"]]],[11,"serialize","","",15,[[["s"],["self"]],["result"]]],[11,"serialize","","",16,[[["s"],["self"]],["result"]]],[11,"serialize","","",17,[[["s"],["self"]],["result"]]],[11,"serialize","","",18,[[["s"],["self"]],["result"]]],[11,"serialize","","",19,[[["s"],["self"]],["result"]]],[11,"serialize","","",20,[[["s"],["self"]],["result"]]],[11,"serialize","","",21,[[["s"],["self"]],["result"]]],[11,"serialize","","",22,[[["s"],["self"]],["result"]]],[11,"serialize","actor::reward","",26,[[["s"],["self"]],["result"]]],[11,"deserialize","actor::account","",2,[[["d"]],["result"]]],[11,"deserialize","actor::cron","",5,[[["d"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"deserialize","","",6,[[["d"]],["result"]]],[11,"deserialize","actor::init","",8,[[["d"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result"]]],[11,"deserialize","","",10,[[["d"]],["result"]]],[11,"deserialize","","",50,[[["d"]],["result"]]],[11,"deserialize","actor::miner","",12,[[["d"]],["result"]]],[11,"deserialize","","",52,[[["d"]],["result"]]],[11,"deserialize","actor::multisig","",13,[[["d"]],["result"]]],[11,"deserialize","","",14,[[["d"]],["result"]]],[11,"deserialize","","",15,[[["d"]],["result"]]],[11,"deserialize","","",16,[[["d"]],["result"]]],[11,"deserialize","","",17,[[["d"]],["result"]]],[11,"deserialize","","",18,[[["d"]],["result"]]],[11,"deserialize","","",19,[[["d"]],["result"]]],[11,"deserialize","","",20,[[["d"]],["result"]]],[11,"deserialize","","",21,[[["d"]],["result"]]],[11,"deserialize","","",22,[[["d"]],["result"]]],[11,"deserialize","actor::reward","",26,[[["d"]],["result"]]],[11,"invoke_method","actor::account","",47,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"invoke_method","actor::cron","",48,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"invoke_method","actor::init","",49,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"invoke_method","actor::multisig","",53,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"invoke_method","actor::power","",54,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"invoke_method","actor::reward","",56,[[["methodnum"],["serialized"],["self"],["rt"]],["serialized"]]],[11,"new","actor","Constructor for actor state",1,[[["biguint"],["cid"],["u64"]],["actorstate"]]],[11,"new","","Constructor if data is encoded already",28,[[["vec",["u8"]],["u8"]],["serialized"]]],[11,"serialize","","Contructor for encoding Cbor encodable structure",28,[[["o"]],[["result",["serialized","error"]],["error"],["serialized"]]]],[11,"bytes","","Returns serialized bytes",28,[[["self"]]]],[11,"deserialize","","Deserializes into a defined type",28,[[["self"]],[["error"],["result",["error"]]]]],[11,"constructor","actor::account","Constructor for Account actor",47,[[["address"],["rt"]]]],[11,"pubkey_address","","",47,[[["rt"]],["address"]]],[11,"new","actor::init","",50,[[["string"],["cid"]],["self"]]],[11,"map_address_to_new_id","","Allocates a new ID address and stores a mapping of the…",50,[[["bs"],["self"],["address"]],[["hamterror"],["result",["address","hamterror"]],["address"]]]],[11,"resolve_address","","ResolveAddress resolves an address to an ID-address, if…",50,[[["bs"],["address"],["self"]],[["address"],["result",["address","string"]],["string"]]]],[11,"constructor","","Init actor constructor",49,[[["constructorparams"],["rt"]]]],[11,"exec","","Exec init actor",49,[[["execparams"],["rt"]],["execreturn"]]],[11,"sector_size","actor::miner","Returns a reference of the amount of space in each sector…",52,[[["self"]],["u64"]]],[11,"amount_locked","actor::multisig","Returns amount locked in multisig contract",13,[[["self"],["chainepoch"]],["tokenamount"]]],[11,"key","","",14,[[],["string"]]],[11,"constructor","","Constructor for Multisig actor",53,[[["constructorparams"],["rt"]]]],[11,"propose","","Multisig actor propose function",53,[[["proposeparams"],["rt"]],["txnid"]]],[11,"approve","","Multisig actor approve function",53,[[["txnidparams"],["rt"]]]],[11,"cancel","","Multisig actor cancel function",53,[[["txnidparams"],["rt"]]]],[11,"add_signer","","Multisig actor function to add signers to multisig",53,[[["addsignerparams"],["rt"]]]],[11,"remove_signer","","Multisig actor function to remove signers to multisig",53,[[["removesignerparams"],["rt"]]]],[11,"swap_signer","","Multisig actor function to swap signers to multisig",53,[[["swapsignerparams"],["rt"]]]],[11,"change_num_approvals_threshold","","Multisig actor function to change number of approvals needed",53,[[["changenumapprovalsthresholdparams"],["rt"]]]],[11,"withdraw_reward","actor::reward","",26,[[["bs"],["address"],["chainepoch"]],["tokenamount"]]]],"p":[[3,"ActorID"],[3,"ActorState"],[3,"State"],[4,"Method"],[3,"Entry"],[3,"State"],[3,"ConstructorParams"],[4,"Method"],[3,"ConstructorParams"],[3,"ExecParams"],[3,"ExecReturn"],[4,"Method"],[3,"State"],[3,"State"],[3,"TxnID"],[3,"Transaction"],[3,"ConstructorParams"],[3,"ProposeParams"],[3,"TxnIDParams"],[3,"AddSignerParams"],[3,"RemoveSignerParams"],[3,"SwapSignerParams"],[3,"ChangeNumApprovalsThresholdParams"],[4,"Method"],[4,"Method"],[3,"Reward"],[3,"State"],[4,"Method"],[3,"Serialized"],[3,"SYSTEM_ACTOR_CODE_ID"],[3,"INIT_ACTOR_CODE_ID"],[3,"CRON_ACTOR_CODE_ID"],[3,"ACCOUNT_ACTOR_CODE_ID"],[3,"POWER_ACTOR_CODE_ID"],[3,"MINER_ACTOR_CODE_ID"],[3,"MARKET_ACTOR_CODE_ID"],[3,"PAYCH_ACTOR_CODE_ID"],[3,"MULTISIG_ACTOR_CODE_ID"],[3,"REWARD_ACTOR_CODE_ID"],[3,"CALLER_TYPES_SIGNABLE"],[3,"SYSTEM_ACTOR_ADDR"],[3,"INIT_ACTOR_ADDR"],[3,"REWARD_ACTOR_ADDR"],[3,"CRON_ACTOR_ADDR"],[3,"STORAGE_POWER_ACTOR_ADDR"],[3,"STORAGE_MARKET_ACTOR_ADDR"],[3,"BURNT_FUNDS_ACTOR_ADDR"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"State"],[3,"Actor"],[3,"MinerInfo"],[3,"Actor"],[3,"Actor"],[3,"State"],[3,"Actor"]]};
searchIndex["blockchain"] = {"doc":"","i":[[0,"message_pool","blockchain","",null,null],[3,"MessagePoolConfig","blockchain::message_pool","Holds all configuration options related to nodes message…",null,null],[3,"Pool","","Pool keeps an unordered, de-duplicated set of Messages and…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]]],"p":[[3,"MessagePoolConfig"],[3,"Pool"]]};
searchIndex["chain"] = {"doc":"","i":[[3,"ChainStore","chain","Generic implementation of the datastore trait and structures",null,null],[12,"db","","",0,null],[3,"TipSetMetadata","","TipSetMetadata is the type stored as the value in the…",null,null],[12,"tipset_state_root","","Root of aggregate state after applying tipset",1,null],[12,"tipset_receipts_root","","Receipts from all message contained within this tipset",1,null],[12,"tipset","","The actual Tipset",1,null],[3,"TipIndex","","Tracks tipsets and their states by TipsetKeys and…",null,null],[4,"Error","","",null,null],[13,"UndefinedKey","","Key was not found",2,null],[13,"NoBlocks","","Tipset contains no blocks",2,null],[13,"KeyValueStore","","Error originating from key-value store",2,null],[13,"Blockchain","","Error originating constructing blockchain structures",2,null],[13,"Encoding","","Error originating from encoding arbitrary data",2,null],[13,"Cid","","Error originating from Cid creation",2,null],[11,"new","","constructor",0,[[["arc"]],["self"]]],[11,"set_tipset_tracker","","Sets tip_index tracker",0,[[["blockheader"],["self"]],[["error"],["result",["error"]]]]],[11,"weight","","weight",0,[[["tipset"],["self"]],[["biguint"],["error"],["result",["biguint","error"]]]]],[11,"set_genesis","","Writes genesis to blockstore",0,[[["self"],["blockheader"]],[["error"],["result",["error"]]]]],[11,"persist_headers","","Writes encoded blockheader data to blockstore",0,[[["tipset"],["self"]],[["error"],["result",["error"]]]]],[11,"put_messages","","Writes encoded message data to blockstore",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"genesis","","Returns genesis blockheader from blockstore",0,[[["self"]],[["option",["blockheader"]],["error"],["result",["option","error"]]]]],[11,"heaviest_tipset","","Returns heaviest tipset from blockstore",0,[[["self"]],[["tipset"],["arc",["tipset"]]]]],[11,"blockstore","","Returns key-value store instance",0,[[["self"]],["db"]]],[11,"tipset_from_keys","","Returns Tipset from key-value store from provided cids",0,[[["self"],["tipsetkeys"]],[["error"],["tipset"],["result",["tipset","error"]]]]],[11,"messages","","Returns a Tuple of bls messages of type UnsignedMessage…",0,[[["blockheader"],["self"]],[["result",["error"]],["error"]]]],[11,"messages_from_cids","","Returns messages from key-value store",0,[[["cid"],["self"],["vec",["cid"]]],[["vec"],["result",["vec","error"]],["error"]]]],[11,"new","","Creates new TipIndex with empty metadata",3,[[],["self"]]],[11,"put","","Adds an entry to TipIndex's metadata After this call the…",3,[[["self"],["tipsetmetadata"]],[["error"],["result",["error"]]]]],[11,"get_tipset","","Returns the tipset corresponding to the hashed index",3,[[["i"],["self"]],[["error"],["tipset"],["result",["tipset","error"]]]]],[11,"get_tipset_state_root","","Returns the state root for the tipset corresponding to the…",3,[[["i"],["self"]],[["cid"],["result",["cid","error"]],["error"]]]],[11,"get_tipset_receipts_root","","Returns the receipt root for the tipset corresponding to…",3,[[["i"],["self"]],[["cid"],["result",["cid","error"]],["error"]]]],[8,"Index","","Trait to allow metadata to be indexed by multiple types of…",null,null],[11,"hash_key","","",4,[[["self"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",2,[[["dberr"]],["error"]]],[11,"from","","",2,[[["blkerr"]],["error"]]],[11,"from","","",2,[[["encerr"]],["error"]]],[11,"from","","",2,[[["serdeerr"]],["error"]]],[11,"from","","",2,[[["ciderr"]],["error"]]],[11,"clone","","",1,[[["self"]],["tipsetmetadata"]]],[11,"default","","",3,[[],["tipindex"]]],[11,"eq","","",2,[[["error"],["self"]],["bool"]]],[11,"ne","","",2,[[["error"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["tipsetmetadata"]],["bool"]]],[11,"ne","","",1,[[["self"],["tipsetmetadata"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"hash_key","","",4,[[["self"]],["u64"]]]],"p":[[3,"ChainStore"],[3,"TipSetMetadata"],[4,"Error"],[3,"TipIndex"],[8,"Index"]]};
searchIndex["chain_sync"] = {"doc":"","i":[[3,"SyncManager","chain_sync","Manages tipsets pulled from network to be synced",null,null],[3,"SyncNetworkContext","","Context used in chain sync to handle network requests",null,null],[12,"receiver","","Receiver channel for network events",0,null],[3,"ChainSyncer","","",null,null],[4,"Error","","",null,null],[13,"NoBlocks","","",1,null],[13,"Blockchain","","Error originating constructing blockchain structures",1,null],[13,"Encoding","","Error originating from encoding arbitrary data",1,null],[13,"InvalidCid","","Error originating from CID construction",1,null],[13,"InvalidRoots","","Error indicating an invalid root",1,null],[13,"Store","","Error indicating a chain store error",1,null],[13,"KeyValueStore","","Error originating from key-value store",1,null],[13,"AMT","","Error originating from the AMT",1,null],[13,"State","","Error originating from state",1,null],[13,"Validation","","Error in validating arbitrary data",1,null],[13,"Other","","Any other error that does not need to be specifically…",1,null],[11,"schedule_tipset","","Schedules a new tipset to be handled by the sync manager",2,[[["self"],["tipset"],["arc",["tipset"]]]]],[11,"select_sync_target","","Retrieves the heaviest tipset in the sync queue",2,[[["self"]],[["arc",["tipset"]],["option",["arc"]]]]],[11,"set_peer_head","","Sets the PeerId indicating the head tipset",2,[[["tipset"],["self"],["peerid"]]]],[11,"new","","",0,[[["sender",["networkmessage"]],["networkmessage"],["networkevent"],["receiver",["networkevent"]],["receiver"]],["self"]]],[11,"blocksync_headers","","Send a blocksync request for only block headers (ignore…",0,[[["self"],["tipsetkeys"],["u64"],["peerid"]]]],[11,"blocksync_request","","Send a blocksync request to the network and await response",0,[[["peerid"],["blocksyncrequest"],["self"]]]],[11,"send_rpc_request","","Send any RPC request to the network and await the response",0,[[["peerid"],["rpcrequest"],["self"]]]],[11,"new","","",3,[[["sender",["networkmessage"]],["networkmessage"],["networkevent"],["arc"],["receiver",["networkevent"]]],[["result",["error"]],["error"]]]],[11,"sync","","Starts syncing process",3,[[]]],[11,"inform_new_head","","informs the syncer about a new potential tipset This…",3,[[["fulltipset"],["self"],["peerid"]],[["result",["error"]],["error"]]]],[11,"fetch_tipset","","Returns FullTipset from store if TipSetKeys exist in…",3,[[["tipsetkeys"],["self"],["peerid"]],[["result",["fulltipset","error"]],["fulltipset"],["error"]]]],[11,"check_blk_msgs","","",3,[[["tipset"],["self"],["block"]],[["result",["error"]],["error"]]]],[11,"validate","","Validates block semantically according to…",3,[[["self"],["block"]],[["result",["error"]],["error"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"clear","","",2,[[["self"]]]],[11,"initialize","","",2,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",1,[[["blkerr"]],["error"]]],[11,"from","","",1,[[["dberr"]],["error"]]],[11,"from","","",1,[[["encerr"]],["error"]]],[11,"from","","",1,[[["serdeerr"]],["error"]]],[11,"from","","",1,[[["ciderr"]],["error"]]],[11,"from","","",1,[[["storeerr"]],["error"]]],[11,"from","","",1,[[["amterr"]],["error"]]],[11,"from","","",1,[[["sterr"]],["error"]]],[11,"default","","",2,[[],["syncmanager"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"SyncNetworkContext"],[4,"Error"],[3,"SyncManager"],[3,"ChainSyncer"]]};
searchIndex["clock"] = {"doc":"","i":[[3,"ChainEpoch","clock","An epoch represents a single valid state in the blockchain",null,null],[12,"0","","",0,null],[3,"ChainEpochClock","","ChainEpochClock is used by the system node to assume weak…",null,null],[11,"new","","Returns a ChainEpochClock based on the given genesis_time…",1,[[["i64"]],["chainepochclock"]]],[11,"get_genesis_time","","Returns the genesis time as a `DateTime<Utc>`",1,[[["self"]],[["utc"],["datetime",["utc"]]]]],[11,"epoch_at_time","","Returns the epoch at a given time",1,[[["self"],["datetime"]],[["result",["chainepoch","tryfrominterror"]],["chainepoch"],["tryfrominterror"]]]],[11,"new","","Returns ChainEpoch based on the given unix timestamp",0,[[["i64"]],[["result",["chainepoch","tryfrominterror"]],["chainepoch"],["tryfrominterror"]]]],[11,"as_u64","","",0,[[["self"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["u64"]],["chainepoch"]]],[11,"clone","","",0,[[["self"]],["chainepoch"]]],[11,"default","","",0,[[],["chainepoch"]]],[11,"eq","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"ne","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["chainepoch"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"le","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"gt","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"ge","","",0,[[["chainepoch"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"sub","","",0,[[["chainepoch"]],["chainepoch"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"serialize","","",0,[[["s"],["self"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]]],"p":[[3,"ChainEpoch"],[3,"ChainEpochClock"]]};
searchIndex["crypto"] = {"doc":"","i":[[3,"Signature","crypto","A cryptographic signature, represented in bytes, of any…",null,null],[3,"VRFPublicKey","","",null,null],[3,"VRFResult","","The output from running a VRF",null,null],[4,"Error","","",null,null],[13,"SigningError","","Failed to produce a signature",0,null],[13,"InvalidRecovery","","Unable to perform ecrecover with the given params",0,null],[13,"InvalidPubKey","","Provided public key is not understood",0,null],[4,"DomainSeparationTag","","Specifies a domain for randomness generation.",null,null],[13,"TicketProduction","","",1,null],[13,"ElectionPoStChallengeSeed","","",1,null],[13,"WindowedPoStChallengeSeed","","",1,null],[13,"SealRandomness","","",1,null],[13,"InteractiveSealChallengeSeed","","",1,null],[4,"SignatureType","","Signature variants for Forest signatures",null,null],[13,"Secp256","","",2,null],[13,"BLS","","",2,null],[5,"is_valid_signature","","Checks if a signature is valid given data and address",null,[[["signature"],["address"]],["bool"]]],[5,"verify_bls_aggregate","","",null,[[["signature"]],["bool"]]],[11,"from_byte","","from_byte allows generating DST from encoded byte",1,[[["u8"]],["option"]]],[11,"new_secp256k1","","Creates a SECP Signature given the raw bytes",3,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new_bls","","Creates a BLS Signature given the raw bytes",3,[[["vec",["u8"]],["u8"]],["self"]]],[11,"bytes","","Returns reference to signature bytes",3,[[["self"]]]],[11,"signature_type","","Returns reference to signature type",3,[[["self"]],["signaturetype"]]],[11,"new","","",4,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new","","Creates a VRFResult from a raw vector",5,[[["vec",["u8"]],["u8"]],["self"]]],[11,"bytes","","Returns reference to underlying vector",5,[[["self"]]]],[11,"max_value","","Returns max value based on BLS_SIG_LEN",5,[[],["self"]]],[11,"validate_syntax","","Validates syntax...",5,[[["self"]],["bool"]]],[11,"verify","","Asserts whether `input` was used with `pk` to produce this…",5,[[["vrfpublickey"],["self"]],["bool"]]],[17,"BLS_SIG_LEN","","BLS signature length in bytes",null,null],[17,"BLS_PUB_LEN","","BLS Public key length in bytes",null,null],[8,"Signer","","Signer is a trait which allows a key implementation to…",null,null],[10,"sign_bytes","","",6,[[["vec",["u8"]],["address"],["self"],["u8"]],[["box",["error"]],["result",["signature","box"]],["signature"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",0,[[["box",["error"]],["error"]],["error"]]],[11,"from","","",0,[[["addresserror"]],["error"]]],[11,"from","","",0,[[["secperror"]],["error"]]],[11,"from","","",0,[[["encodingerror"]],["error"]]],[11,"clone","","",1,[[["self"]],["domainseparationtag"]]],[11,"clone","","",2,[[["self"]],["signaturetype"]]],[11,"clone","","",3,[[["self"]],["signature"]]],[11,"clone","","",5,[[["self"]],["vrfresult"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["signature"]]],[11,"default","","",5,[[],["vrfresult"]]],[11,"cmp","","",5,[[["self"],["vrfresult"]],["ordering"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",1,[[["domainseparationtag"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["signaturetype"]],["bool"]]],[11,"eq","","",3,[[["signature"],["self"]],["bool"]]],[11,"ne","","",3,[[["signature"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"ne","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["vrfresult"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"le","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"gt","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"ge","","",5,[[["self"],["vrfresult"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"from_i64","","",1,[[["i64"]],["option"]]],[11,"from_u64","","",1,[[["u64"]],["option"]]],[11,"from_i64","","",2,[[["i64"]],["option"]]],[11,"from_u64","","",2,[[["u64"]],["option"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]]],"p":[[4,"Error"],[4,"DomainSeparationTag"],[4,"SignatureType"],[3,"Signature"],[3,"VRFPublicKey"],[3,"VRFResult"],[8,"Signer"]]};
searchIndex["db"] = {"doc":"","i":[[3,"MemoryDB","db","A thread-safe `HashMap` wrapper.",null,null],[3,"RocksDb","","",null,null],[4,"Error","","",null,null],[13,"InvalidBulkLen","","",0,null],[13,"Database","","",0,null],[13,"Encoding","","",0,null],[11,"new","","",1,[[["p"]],["self"]]],[11,"open","","Initializes the database if uninitialized, does nothing if…",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"db","","Returns reference to db as long as it is initialized",1,[[["self"]],[["db"],["result",["db","error"]],["error"]]]],[8,"DatabaseService","","",null,null],[11,"open","","",2,[[["self"]],[["result",["error"]],["error"]]]],[8,"Store","","Store interface used as a KV store implementation",null,null],[10,"read","","Read single value from data store and return `None` if key…",3,[[["self"],["k"]],[["error"],["result",["option","error"]],["option",["vec"]]]]],[10,"write","","Write a single value to the data store.",3,[[["v"],["self"],["k"]],[["result",["error"]],["error"]]]],[10,"delete","","Delete value at key.",3,[[["self"],["k"]],[["result",["error"]],["error"]]]],[10,"exists","","Returns `Ok(true)` if key exists in store",3,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[10,"bulk_read","","Read slice of keys and return a vector of optional values.",3,[[["self"]],[["vec",["option"]],["error"],["result",["vec","error"]]]]],[10,"bulk_write","","Write slice of KV pairs.",3,[[["self"]],[["result",["error"]],["error"]]]],[10,"bulk_delete","","Bulk delete keys from the data store.",3,[[["self"]],[["result",["error"]],["error"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"open","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"write","","",4,[[["v"],["self"],["k"]],[["result",["error"]],["error"]]]],[11,"delete","","",4,[[["self"],["k"]],[["result",["error"]],["error"]]]],[11,"bulk_write","","",4,[[["self"]],[["result",["error"]],["error"]]]],[11,"bulk_delete","","",4,[[["self"]],[["result",["error"]],["error"]]]],[11,"read","","",4,[[["self"],["k"]],[["error"],["result",["option","error"]],["option",["vec"]]]]],[11,"exists","","",4,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[11,"bulk_read","","",4,[[["self"]],[["vec",["option"]],["error"],["result",["vec","error"]]]]],[11,"write","","",1,[[["v"],["self"],["k"]],[["result",["error"]],["error"]]]],[11,"delete","","",1,[[["self"],["k"]],[["result",["error"]],["error"]]]],[11,"bulk_write","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"bulk_delete","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"read","","",1,[[["self"],["k"]],[["error"],["result",["option","error"]],["option",["vec"]]]]],[11,"exists","","",1,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[11,"bulk_read","","",1,[[["self"]],[["vec",["option"]],["error"],["result",["vec","error"]]]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["cborerror"]],["error"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",1,[[],["rocksdb"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"Error"],[3,"RocksDb"],[8,"DatabaseService"],[8,"Store"],[3,"MemoryDB"]]};
searchIndex["forest"] = {"doc":"","i":[[5,"block_until_sigint","forest","",null,[[]]],[5,"main","","",null,[[]]],[0,"cli","","",null,null],[5,"cli","forest::cli","",null,[[],[["result",["config","error"]],["config"],["error"]]]],[0,"config","","",null,null],[3,"Config","forest::cli::config","",null,null],[12,"network","","",0,null],[12,"data_dir","","",0,null],[17,"_IMPL_DESERIALIZE_FOR_Config","","",null,null],[0,"logger","forest","",null,null],[5,"setup_logger","forest::logger","",null,[[]]],[11,"from","forest::cli::config","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"vzip","","",0,[[],["v"]]],[11,"default","","",0,[[],["self"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"p":[[3,"Config"]]};
searchIndex["forest_address"] = {"doc":"","i":[[3,"Address","forest_address","Address is the struct that defines the protocol and data…",null,null],[4,"Error","","",null,null],[13,"UnknownNetwork","","",0,null],[13,"UnknownProtocol","","",0,null],[13,"InvalidPayload","","",0,null],[13,"InvalidLength","","",0,null],[13,"InvalidPayloadLength","","",0,null],[13,"InvalidBLSLength","","",0,null],[13,"InvalidChecksum","","",0,null],[13,"Base32Decoding","","",0,null],[4,"Network","","Network defines the preconfigured networks to use with…",null,null],[13,"Mainnet","","",1,null],[13,"Testnet","","",1,null],[4,"Protocol","","Protocol defines the addressing protocol used to derive…",null,null],[13,"ID","","",2,null],[13,"Secp256k1","","",2,null],[13,"Actor","","",2,null],[13,"BLS","","",2,null],[5,"checksum","","Checksum calculates the 4 byte checksum hash",null,[[],[["vec",["u8"]],["u8"]]]],[5,"validate_checksum","","Validates the checksum against the ingest data",null,[[["vec",["u8"]],["u8"]],["bool"]]],[17,"BLS_PUB_LEN","","",null,null],[17,"PAYLOAD_HASH_LEN","","",null,null],[17,"CHECKSUM_HASH_LEN","","",null,null],[11,"from_bytes","","Creates address from encoded bytes",3,[[["vec",["u8"]],["u8"]],[["result",["error"]],["error"]]]],[11,"new_id","","Generates new address using ID protocol",3,[[["u64"]],[["result",["error"]],["error"]]]],[11,"new_secp256k1","","Generates new address using Secp256k1 pubkey",3,[[],[["result",["error"]],["error"]]]],[11,"new_actor","","Generates new address using the Actor protocol",3,[[],[["result",["error"]],["error"]]]],[11,"new_bls","","Generates new address using BLS pubkey",3,[[["vec",["u8"]],["u8"]],[["result",["error"]],["error"]]]],[11,"protocol","","Returns protocol for Address",3,[[["self"]],["protocol"]]],[11,"payload","","Returns data payload of Address",3,[[["self"]]]],[11,"network","","Returns network configuration of Address",3,[[["self"]],["network"]]],[11,"set_network","","Sets the network for the address and returns a mutable…",3,[[["self"],["network"]],["self"]]],[11,"to_bytes","","Returns encoded bytes of Address",3,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"hash_key","","String key for Address used in indexing in IPLD Note:…",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["decodeerror"]],["error"]]],[11,"from","","",0,[[["parseinterror"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"clone","","",1,[[["self"]],["network"]]],[11,"clone","","",2,[[["self"]],["protocol"]]],[11,"clone","","",3,[[["self"]],["address"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["address"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["network"]],["bool"]]],[11,"eq","","",2,[[["self"],["protocol"]],["bool"]]],[11,"eq","","",3,[[["self"],["address"]],["bool"]]],[11,"ne","","",3,[[["self"],["address"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"from_str","","",3,[[["str"]],[["result",["error"]],["error"]]]],[11,"from_i64","","",2,[[["i64"]],["option"]]],[11,"from_u64","","",2,[[["u64"]],["option"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]]],"p":[[4,"Error"],[4,"Network"],[4,"Protocol"],[3,"Address"]]};
searchIndex["forest_bigint"] = {"doc":"","i":[[3,"ParseBigIntError","forest_bigint","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",0,[[["self"]],[["biguint"],["option",["biguint"]]]]],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",2,[[["self"]],[["option",["bigint"]],["bigint"]]]],[0,"bigint_ser","","",null,null],[5,"serialize","forest_bigint::bigint_ser","Remote derive type for big int",null,[[["bigint"],["s"]],["result"]]],[5,"deserialize","","",null,[[["d"]],[["result",["bigint"]],["bigint"]]]],[0,"biguint_ser","forest_bigint","",null,null],[5,"serialize","forest_bigint::biguint_ser","",null,[[["biguint"],["s"]],["result"]]],[5,"deserialize","","",null,[[["d"]],[["result",["biguint"]],["biguint"]]]],[11,"from","forest_bigint","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"rem","","",5,[[["i64"]],["bigint"]]],[11,"rem","","",5,[[["i8"]],["bigint"]]],[11,"rem","","",5,[[["i16"]],["bigint"]]],[11,"rem","","",5,[[["u64"]],["bigint"]]],[11,"rem","","",5,[[["u128"]],["bigint"]]],[11,"rem","","",5,[[["u16"]],["bigint"]]],[11,"rem","","",5,[[["u16"]],["bigint"]]],[11,"rem","","",5,[[["i8"]],["bigint"]]],[11,"rem","","",5,[[["usize"]],["bigint"]]],[11,"rem","","",5,[[["u8"]],["bigint"]]],[11,"rem","","",5,[[["i16"]],["bigint"]]],[11,"rem","","",4,[[["u64"]],["biguint"]]],[11,"rem","","",5,[[["bigint"]],["bigint"]]],[11,"rem","","",5,[[["usize"]],["bigint"]]],[11,"rem","","",4,[[["usize"]],["biguint"]]],[11,"rem","","",4,[[["usize"]],["biguint"]]],[11,"rem","","",5,[[["i32"]],["bigint"]]],[11,"rem","","",5,[[["i32"]],["bigint"]]],[11,"rem","","",4,[[["u8"]],["biguint"]]],[11,"rem","","",4,[[["u32"]],["biguint"]]],[11,"rem","","",5,[[["u32"]],["bigint"]]],[11,"rem","","",5,[[["i128"]],["bigint"]]],[11,"rem","","",5,[[["bigint"]],["bigint"]]],[11,"rem","","",5,[[["i128"]],["bigint"]]],[11,"rem","","",4,[[["u64"]],["biguint"]]],[11,"rem","","",4,[[["u16"]],["biguint"]]],[11,"rem","","",5,[[["i64"]],["bigint"]]],[11,"rem","","",4,[[["u128"]],["biguint"]]],[11,"rem","","",5,[[["u8"]],["bigint"]]],[11,"rem","","",5,[[["isize"]],["bigint"]]],[11,"rem","","",4,[[["u16"]],["biguint"]]],[11,"rem","","",4,[[["biguint"]],["biguint"]]],[11,"rem","","",4,[[["u128"]],["biguint"]]],[11,"rem","","",5,[[["u128"]],["bigint"]]],[11,"rem","","",5,[[["isize"]],["bigint"]]],[11,"rem","","",5,[[["u32"]],["bigint"]]],[11,"rem","","",4,[[["biguint"]],["biguint"]]],[11,"rem","","",5,[[["u64"]],["bigint"]]],[11,"rem","","",4,[[["u32"]],["biguint"]]],[11,"rem","","",4,[[["u8"]],["biguint"]]],[11,"to_i64","","",5,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","",5,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64","","",5,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_u128","","",5,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32","","",5,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64","","",5,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"to_i64","","",4,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","",4,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64","","",4,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_u128","","",4,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32","","",4,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64","","",4,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"add_assign","","",5,[[["i64"],["self"]]]],[11,"add_assign","","",5,[[["self"],["u64"]]]],[11,"add_assign","","",5,[[["self"],["i128"]]]],[11,"add_assign","","",4,[[["self"],["u64"]]]],[11,"add_assign","","",5,[[["self"],["bigint"]]]],[11,"add_assign","","",4,[[["self"],["u128"]]]],[11,"add_assign","","",5,[[["self"],["i8"]]]],[11,"add_assign","","",4,[[["self"],["biguint"]]]],[11,"add_assign","","",4,[[["u16"],["self"]]]],[11,"add_assign","","",4,[[["self"],["u8"]]]],[11,"add_assign","","",5,[[["self"],["i32"]]]],[11,"add_assign","","",5,[[["self"],["bigint"]]]],[11,"add_assign","","",5,[[["self"],["usize"]]]],[11,"add_assign","","",5,[[["isize"],["self"]]]],[11,"add_assign","","",5,[[["u16"],["self"]]]],[11,"add_assign","","",5,[[["self"],["u128"]]]],[11,"add_assign","","",4,[[["biguint"],["self"]]]],[11,"add_assign","","",5,[[["self"],["u32"]]]],[11,"add_assign","","",4,[[["self"],["u32"]]]],[11,"add_assign","","",5,[[["self"],["i16"]]]],[11,"add_assign","","",4,[[["self"],["usize"]]]],[11,"add_assign","","",5,[[["self"],["u8"]]]],[11,"shr_assign","","",5,[[["self"],["usize"]]]],[11,"shr_assign","","",4,[[["self"],["usize"]]]],[11,"zero","","",5,[[],["bigint"]]],[11,"set_zero","","",5,[[["self"]]]],[11,"is_zero","","",5,[[["self"]],["bool"]]],[11,"zero","","",4,[[],["biguint"]]],[11,"set_zero","","",4,[[["self"]]]],[11,"is_zero","","",4,[[["self"]],["bool"]]],[11,"abs","","",5,[[["self"]],["bigint"]]],[11,"abs_sub","","",5,[[["self"],["bigint"]],["bigint"]]],[11,"signum","","",5,[[["self"]],["bigint"]]],[11,"is_positive","","",5,[[["self"]],["bool"]]],[11,"is_negative","","",5,[[["self"]],["bool"]]],[11,"from_i64","","",5,[[["i64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_i128","","",5,[[["i128"]],[["option",["bigint"]],["bigint"]]]],[11,"from_u64","","",5,[[["u64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_u128","","",5,[[["u128"]],[["option",["bigint"]],["bigint"]]]],[11,"from_f64","","",5,[[["f64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_i64","","",4,[[["i64"]],[["biguint"],["option",["biguint"]]]]],[11,"from_i128","","",4,[[["i128"]],[["biguint"],["option",["biguint"]]]]],[11,"from_u64","","",4,[[["u64"]],[["biguint"],["option",["biguint"]]]]],[11,"from_u128","","",4,[[["u128"]],[["biguint"],["option",["biguint"]]]]],[11,"from_f64","","",4,[[["f64"]],[["biguint"],["option",["biguint"]]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"sum","","",4,[[["i"]],["biguint"]]],[11,"sum","","",5,[[["i"]],["bigint"]]],[11,"bitand","","",5,[[["bigint"]],["bigint"]]],[11,"bitand","","",5,[[["bigint"]],["bigint"]]],[11,"bitand","","",4,[[["biguint"]],["biguint"]]],[11,"bitand","","",4,[[["biguint"]],["biguint"]]],[11,"sub","","",5,[[["u128"]],["bigint"]]],[11,"sub","","",5,[[["i64"]],["bigint"]]],[11,"sub","","",4,[[["u64"]],["biguint"]]],[11,"sub","","",5,[[["i8"]],["bigint"]]],[11,"sub","","",4,[[["u64"]],["biguint"]]],[11,"sub","","",4,[[["u128"]],["biguint"]]],[11,"sub","","",5,[[["u64"]],["bigint"]]],[11,"sub","","",5,[[["i16"]],["bigint"]]],[11,"sub","","",5,[[["u8"]],["bigint"]]],[11,"sub","","",5,[[["bigint"]],["bigint"]]],[11,"sub","","",4,[[["u16"]],["biguint"]]],[11,"sub","","",5,[[["i8"]],["bigint"]]],[11,"sub","","",5,[[["u16"]],["bigint"]]],[11,"sub","","",5,[[["i64"]],["bigint"]]],[11,"sub","","",5,[[["u64"]],["bigint"]]],[11,"sub","","",5,[[["u128"]],["bigint"]]],[11,"sub","","",5,[[["u32"]],["bigint"]]],[11,"sub","","",4,[[["u128"]],["biguint"]]],[11,"sub","","",5,[[["i128"]],["bigint"]]],[11,"sub","","",5,[[["isize"]],["bigint"]]],[11,"sub","","",5,[[["i32"]],["bigint"]]],[11,"sub","","",4,[[["biguint"]],["biguint"]]],[11,"sub","","",5,[[["i128"]],["bigint"]]],[11,"sub","","",4,[[["u32"]],["biguint"]]],[11,"sub","","",4,[[["biguint"]],["biguint"]]],[11,"sub","","",5,[[["isize"]],["bigint"]]],[11,"sub","","",5,[[["i16"]],["bigint"]]],[11,"sub","","",4,[[["u32"]],["biguint"]]],[11,"sub","","",5,[[["usize"]],["bigint"]]],[11,"sub","","",5,[[["u32"]],["bigint"]]],[11,"sub","","",4,[[["u8"]],["biguint"]]],[11,"sub","","",5,[[["bigint"]],["bigint"]]],[11,"sub","","",4,[[["u16"]],["biguint"]]],[11,"sub","","",4,[[["usize"]],["biguint"]]],[11,"sub","","",5,[[["u16"]],["bigint"]]],[11,"sub","","",5,[[["usize"]],["bigint"]]],[11,"sub","","",5,[[["u8"]],["bigint"]]],[11,"sub","","",4,[[["usize"]],["biguint"]]],[11,"sub","","",5,[[["i32"]],["bigint"]]],[11,"sub","","",4,[[["u8"]],["biguint"]]],[11,"cmp","","",1,[[["sign"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["bigint"]],["ordering"]]],[11,"cmp","","",4,[[["biguint"],["self"]],["ordering"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"checked_mul","","",4,[[["biguint"],["self"]],[["biguint"],["option",["biguint"]]]]],[11,"checked_mul","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_sub","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_sub","","",4,[[["biguint"],["self"]],[["biguint"],["option",["biguint"]]]]],[11,"bitor_assign","","",4,[[["biguint"],["self"]]]],[11,"bitor_assign","","",5,[[["self"],["bigint"]]]],[11,"bitor_assign","","",4,[[["self"],["biguint"]]]],[11,"bitor_assign","","",5,[[["self"],["bigint"]]]],[11,"to_bigint","","",5,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"to_bigint","","",4,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"div","","",4,[[["u16"]],["biguint"]]],[11,"div","","",4,[[["biguint"]],["biguint"]]],[11,"div","","",5,[[["i8"]],["bigint"]]],[11,"div","","",5,[[["bigint"]],["bigint"]]],[11,"div","","",5,[[["i32"]],["bigint"]]],[11,"div","","",5,[[["u32"]],["bigint"]]],[11,"div","","",4,[[["u32"]],["biguint"]]],[11,"div","","",5,[[["u128"]],["bigint"]]],[11,"div","","",5,[[["i16"]],["bigint"]]],[11,"div","","",4,[[["u32"]],["biguint"]]],[11,"div","","",5,[[["i64"]],["bigint"]]],[11,"div","","",4,[[["u128"]],["biguint"]]],[11,"div","","",4,[[["u64"]],["biguint"]]],[11,"div","","",5,[[["i32"]],["bigint"]]],[11,"div","","",5,[[["u16"]],["bigint"]]],[11,"div","","",5,[[["u64"]],["bigint"]]],[11,"div","","",5,[[["usize"]],["bigint"]]],[11,"div","","",5,[[["u128"]],["bigint"]]],[11,"div","","",5,[[["u8"]],["bigint"]]],[11,"div","","",4,[[["u8"]],["biguint"]]],[11,"div","","",5,[[["i16"]],["bigint"]]],[11,"div","","",4,[[["u64"]],["biguint"]]],[11,"div","","",5,[[["u64"]],["bigint"]]],[11,"div","","",5,[[["bigint"]],["bigint"]]],[11,"div","","",5,[[["isize"]],["bigint"]]],[11,"div","","",5,[[["i128"]],["bigint"]]],[11,"div","","",4,[[["u8"]],["biguint"]]],[11,"div","","",5,[[["usize"]],["bigint"]]],[11,"div","","",5,[[["isize"]],["bigint"]]],[11,"div","","",5,[[["i8"]],["bigint"]]],[11,"div","","",4,[[["u128"]],["biguint"]]],[11,"div","","",5,[[["u32"]],["bigint"]]],[11,"div","","",4,[[["u16"]],["biguint"]]],[11,"div","","",5,[[["i64"]],["bigint"]]],[11,"div","","",5,[[["i128"]],["bigint"]]],[11,"div","","",4,[[["biguint"]],["biguint"]]],[11,"div","","",4,[[["usize"]],["biguint"]]],[11,"div","","",4,[[["usize"]],["biguint"]]],[11,"div","","",5,[[["u8"]],["bigint"]]],[11,"div","","",5,[[["u16"]],["bigint"]]],[11,"product","","",4,[[["i"]],["biguint"]]],[11,"product","","",5,[[["i"]],["bigint"]]],[11,"one","","",5,[[],["bigint"]]],[11,"set_one","","",5,[[["self"]]]],[11,"is_one","","",5,[[["self"]],["bool"]]],[11,"one","","",4,[[],["biguint"]]],[11,"set_one","","",4,[[["self"]]]],[11,"is_one","","",4,[[["self"]],["bool"]]],[11,"checked_add","","",4,[[["biguint"],["self"]],[["biguint"],["option",["biguint"]]]]],[11,"checked_add","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"sub_assign","","",5,[[["self"],["i128"]]]],[11,"sub_assign","","",5,[[["self"],["usize"]]]],[11,"sub_assign","","",5,[[["self"],["u8"]]]],[11,"sub_assign","","",5,[[["self"],["i8"]]]],[11,"sub_assign","","",5,[[["self"],["i16"]]]],[11,"sub_assign","","",4,[[["biguint"],["self"]]]],[11,"sub_assign","","",5,[[["self"],["u128"]]]],[11,"sub_assign","","",5,[[["isize"],["self"]]]],[11,"sub_assign","","",4,[[["self"],["u64"]]]],[11,"sub_assign","","",4,[[["self"],["u128"]]]],[11,"sub_assign","","",5,[[["self"],["bigint"]]]],[11,"sub_assign","","",5,[[["i64"],["self"]]]],[11,"sub_assign","","",5,[[["self"],["u32"]]]],[11,"sub_assign","","",5,[[["u16"],["self"]]]],[11,"sub_assign","","",5,[[["self"],["i32"]]]],[11,"sub_assign","","",4,[[["u16"],["self"]]]],[11,"sub_assign","","",4,[[["self"],["usize"]]]],[11,"sub_assign","","",5,[[["self"],["u64"]]]],[11,"sub_assign","","",4,[[["biguint"],["self"]]]],[11,"sub_assign","","",5,[[["self"],["bigint"]]]],[11,"sub_assign","","",4,[[["self"],["u32"]]]],[11,"sub_assign","","",4,[[["self"],["u8"]]]],[11,"nth_root","","",5,[[["u32"],["self"]],["bigint"]]],[11,"sqrt","","",5,[[["self"]],["bigint"]]],[11,"cbrt","","",5,[[["self"]],["bigint"]]],[11,"nth_root","","",4,[[["u32"],["self"]],["biguint"]]],[11,"sqrt","","",4,[[["self"]],["biguint"]]],[11,"cbrt","","",4,[[["self"]],["biguint"]]],[11,"not","","",5,[[],["bigint"]]],[11,"div_rem","","",5,[[["self"],["bigint"]]]],[11,"div_floor","","",5,[[["self"],["bigint"]],["bigint"]]],[11,"mod_floor","","",5,[[["self"],["bigint"]],["bigint"]]],[11,"div_mod_floor","","",5,[[["self"],["bigint"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",5,[[["self"],["bigint"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",5,[[["self"],["bigint"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,[[["self"],["bigint"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,[[["self"],["bigint"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,[[["self"]],["bool"]]],[11,"div_rem","","",4,[[["biguint"],["self"]]]],[11,"div_floor","","",4,[[["biguint"],["self"]],["biguint"]]],[11,"mod_floor","","",4,[[["biguint"],["self"]],["biguint"]]],[11,"div_mod_floor","","",4,[[["biguint"],["self"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",4,[[["biguint"],["self"]],["biguint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",4,[[["biguint"],["self"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",4,[[["biguint"],["self"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4,[[["biguint"],["self"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",4,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",4,[[["self"]],["bool"]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"bitxor","","",4,[[["biguint"]],["biguint"]]],[11,"bitxor","","",4,[[["biguint"]],["biguint"]]],[11,"bitxor","","",5,[[["bigint"]],["bigint"]]],[11,"bitxor","","",5,[[["bigint"]],["bigint"]]],[11,"bitand_assign","","",4,[[["biguint"],["self"]]]],[11,"bitand_assign","","",5,[[["self"],["bigint"]]]],[11,"bitand_assign","","",5,[[["self"],["bigint"]]]],[11,"bitand_assign","","",4,[[["self"],["biguint"]]]],[11,"mul","","",5,[[["usize"]],["bigint"]]],[11,"mul","","",5,[[["i16"]],["bigint"]]],[11,"mul","","",4,[[["u64"]],["biguint"]]],[11,"mul","","",4,[[["biguint"]],["biguint"]]],[11,"mul","","",4,[[["biguint"]],["biguint"]]],[11,"mul","","",5,[[["bigint"]],["bigint"]]],[11,"mul","","",5,[[["usize"]],["bigint"]]],[11,"mul","","",4,[[["u16"]],["biguint"]]],[11,"mul","","",5,[[["u128"]],["bigint"]]],[11,"mul","","",5,[[["i16"]],["bigint"]]],[11,"mul","","",5,[[["i8"]],["bigint"]]],[11,"mul","","",5,[[["u32"]],["bigint"]]],[11,"mul","","",5,[[["u64"]],["bigint"]]],[11,"mul","","",5,[[["bigint"]],["bigint"]]],[11,"mul","","",4,[[["u128"]],["biguint"]]],[11,"mul","","",5,[[["i128"]],["bigint"]]],[11,"mul","","",5,[[["u16"]],["bigint"]]],[11,"mul","","",5,[[["u8"]],["bigint"]]],[11,"mul","","",4,[[["u32"]],["biguint"]]],[11,"mul","","",5,[[["u8"]],["bigint"]]],[11,"mul","","",1,[[["sign"]],["sign"]]],[11,"mul","","",5,[[["i32"]],["bigint"]]],[11,"mul","","",5,[[["i64"]],["bigint"]]],[11,"mul","","",5,[[["u64"]],["bigint"]]],[11,"mul","","",5,[[["u128"]],["bigint"]]],[11,"mul","","",5,[[["i128"]],["bigint"]]],[11,"mul","","",4,[[["usize"]],["biguint"]]],[11,"mul","","",5,[[["i32"]],["bigint"]]],[11,"mul","","",5,[[["isize"]],["bigint"]]],[11,"mul","","",4,[[["u128"]],["biguint"]]],[11,"mul","","",5,[[["i8"]],["bigint"]]],[11,"mul","","",4,[[["u16"]],["biguint"]]],[11,"mul","","",5,[[["isize"]],["bigint"]]],[11,"mul","","",5,[[["u16"]],["bigint"]]],[11,"mul","","",4,[[["usize"]],["biguint"]]],[11,"mul","","",4,[[["u64"]],["biguint"]]],[11,"mul","","",5,[[["u32"]],["bigint"]]],[11,"mul","","",4,[[["u32"]],["biguint"]]],[11,"mul","","",4,[[["u8"]],["biguint"]]],[11,"mul","","",4,[[["u8"]],["biguint"]]],[11,"mul","","",5,[[["i64"]],["bigint"]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"shl_assign","","",4,[[["self"],["usize"]]]],[11,"shl_assign","","",5,[[["self"],["usize"]]]],[11,"bitxor_assign","","",4,[[["biguint"],["self"]]]],[11,"bitxor_assign","","",5,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",5,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",4,[[["self"],["biguint"]]]],[11,"mul_assign","","",5,[[["self"],["i8"]]]],[11,"mul_assign","","",5,[[["self"],["u8"]]]],[11,"mul_assign","","",5,[[["self"],["i128"]]]],[11,"mul_assign","","",5,[[["self"],["usize"]]]],[11,"mul_assign","","",4,[[["self"],["u8"]]]],[11,"mul_assign","","",5,[[["self"],["bigint"]]]],[11,"mul_assign","","",4,[[["self"],["u64"]]]],[11,"mul_assign","","",5,[[["isize"],["self"]]]],[11,"mul_assign","","",4,[[["self"],["u32"]]]],[11,"mul_assign","","",5,[[["self"],["u128"]]]],[11,"mul_assign","","",5,[[["i64"],["self"]]]],[11,"mul_assign","","",4,[[["self"],["u128"]]]],[11,"mul_assign","","",4,[[["u16"],["self"]]]],[11,"mul_assign","","",4,[[["biguint"],["self"]]]],[11,"mul_assign","","",5,[[["self"],["i16"]]]],[11,"mul_assign","","",5,[[["self"],["u64"]]]],[11,"mul_assign","","",5,[[["self"],["u32"]]]],[11,"mul_assign","","",5,[[["self"],["i32"]]]],[11,"mul_assign","","",5,[[["u16"],["self"]]]],[11,"mul_assign","","",4,[[["biguint"],["self"]]]],[11,"mul_assign","","",4,[[["self"],["usize"]]]],[11,"mul_assign","","",5,[[["self"],["bigint"]]]],[11,"add","","",4,[[["biguint"]],["biguint"]]],[11,"add","","",5,[[["u8"]],["bigint"]]],[11,"add","","",4,[[["u32"]],["biguint"]]],[11,"add","","",5,[[["isize"]],["bigint"]]],[11,"add","","",5,[[["bigint"]],["bigint"]]],[11,"add","","",4,[[["u128"]],["biguint"]]],[11,"add","","",4,[[["u8"]],["biguint"]]],[11,"add","","",4,[[["biguint"]],["biguint"]]],[11,"add","","",5,[[["u16"]],["bigint"]]],[11,"add","","",5,[[["u16"]],["bigint"]]],[11,"add","","",5,[[["i32"]],["bigint"]]],[11,"add","","",4,[[["usize"]],["biguint"]]],[11,"add","","",5,[[["i128"]],["bigint"]]],[11,"add","","",5,[[["i16"]],["bigint"]]],[11,"add","","",5,[[["i8"]],["bigint"]]],[11,"add","","",5,[[["u8"]],["bigint"]]],[11,"add","","",4,[[["u16"]],["biguint"]]],[11,"add","","",5,[[["i32"]],["bigint"]]],[11,"add","","",4,[[["usize"]],["biguint"]]],[11,"add","","",5,[[["i8"]],["bigint"]]],[11,"add","","",5,[[["bigint"]],["bigint"]]],[11,"add","","",5,[[["usize"]],["bigint"]]],[11,"add","","",4,[[["u64"]],["biguint"]]],[11,"add","","",5,[[["i64"]],["bigint"]]],[11,"add","","",5,[[["u128"]],["bigint"]]],[11,"add","","",4,[[["u64"]],["biguint"]]],[11,"add","","",5,[[["u64"]],["bigint"]]],[11,"add","","",5,[[["i16"]],["bigint"]]],[11,"add","","",5,[[["i128"]],["bigint"]]],[11,"add","","",4,[[["u128"]],["biguint"]]],[11,"add","","",5,[[["u32"]],["bigint"]]],[11,"add","","",4,[[["u32"]],["biguint"]]],[11,"add","","",4,[[["u16"]],["biguint"]]],[11,"add","","",5,[[["isize"]],["bigint"]]],[11,"add","","",5,[[["u64"]],["bigint"]]],[11,"add","","",5,[[["usize"]],["bigint"]]],[11,"add","","",5,[[["u128"]],["bigint"]]],[11,"add","","",4,[[["u8"]],["biguint"]]],[11,"add","","",5,[[["i64"]],["bigint"]]],[11,"add","","",5,[[["u32"]],["bigint"]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"to_biguint","","",5,[[["self"]],[["biguint"],["option",["biguint"]]]]],[11,"to_biguint","","",4,[[["self"]],[["biguint"],["option",["biguint"]]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"clone","","",4,[[["self"]],["biguint"]]],[11,"clone","","",1,[[["self"]],["sign"]]],[11,"clone","","",5,[[["self"]],["bigint"]]],[11,"clone","","",3,[[["self"]],["parsebiginterror"]]],[11,"partial_cmp","","",4,[[["biguint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",1,[[["sign"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["bigint"]],[["ordering"],["option",["ordering"]]]]],[11,"neg","","",4,[[],["biguint"]]],[11,"neg","","",5,[[],["bigint"]]],[11,"neg","","Negate Sign value.",1,[[],["sign"]]],[11,"from_str","","",5,[[["str"]],[["bigint"],["parsebiginterror"],["result",["bigint","parsebiginterror"]]]]],[11,"from_str","","",4,[[["str"]],[["biguint"],["result",["biguint","parsebiginterror"]],["parsebiginterror"]]]],[11,"from","","",5,[[["u8"]],["bigint"]]],[11,"from","","",5,[[["i32"]],["bigint"]]],[11,"from","","",5,[[["i8"]],["bigint"]]],[11,"from","","",4,[[["u8"]],["biguint"]]],[11,"from","","",5,[[["u64"]],["bigint"]]],[11,"from","","",5,[[["i16"]],["bigint"]]],[11,"from","","",5,[[["i128"]],["bigint"]]],[11,"from","","",5,[[["usize"]],["bigint"]]],[11,"from","","",5,[[["isize"]],["bigint"]]],[11,"from","","",4,[[["usize"]],["biguint"]]],[11,"from","","",4,[[["u128"]],["biguint"]]],[11,"from","","",5,[[["u32"]],["bigint"]]],[11,"from","","",5,[[["i64"]],["bigint"]]],[11,"from","","",5,[[["u128"]],["bigint"]]],[11,"from","","",4,[[["u64"]],["biguint"]]],[11,"from","","",5,[[["u16"]],["bigint"]]],[11,"from","","",4,[[["u16"]],["biguint"]]],[11,"from","","",5,[[["biguint"]],["bigint"]]],[11,"from","","",4,[[["u32"]],["biguint"]]],[11,"default","","",4,[[],["biguint"]]],[11,"default","","",5,[[],["bigint"]]],[11,"shr","","",5,[[["usize"]],["bigint"]]],[11,"shr","","",4,[[["usize"]],["biguint"]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"shl","","",4,[[["usize"]],["biguint"]]],[11,"shl","","",5,[[["usize"]],["bigint"]]],[11,"checked_div","","",4,[[["biguint"],["self"]],[["biguint"],["option",["biguint"]]]]],[11,"checked_div","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"fmt","","",5,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",4,[[["str"],["u32"]],[["biguint"],["result",["biguint","parsebiginterror"]],["parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",5,[[["str"],["u32"]],[["bigint"],["parsebiginterror"],["result",["bigint","parsebiginterror"]]]]],[11,"rem_assign","","",5,[[["i64"],["self"]]]],[11,"rem_assign","","",4,[[["self"],["biguint"]]]],[11,"rem_assign","","",5,[[["self"],["usize"]]]],[11,"rem_assign","","",5,[[["self"],["u8"]]]],[11,"rem_assign","","",4,[[["u16"],["self"]]]],[11,"rem_assign","","",4,[[["self"],["u32"]]]],[11,"rem_assign","","",4,[[["biguint"],["self"]]]],[11,"rem_assign","","",5,[[["u16"],["self"]]]],[11,"rem_assign","","",5,[[["self"],["u128"]]]],[11,"rem_assign","","",5,[[["self"],["i8"]]]],[11,"rem_assign","","",4,[[["self"],["u8"]]]],[11,"rem_assign","","",4,[[["self"],["u64"]]]],[11,"rem_assign","","",5,[[["self"],["i32"]]]],[11,"rem_assign","","",4,[[["self"],["u128"]]]],[11,"rem_assign","","",5,[[["self"],["bigint"]]]],[11,"rem_assign","","",5,[[["self"],["u64"]]]],[11,"rem_assign","","",4,[[["self"],["usize"]]]],[11,"rem_assign","","",5,[[["isize"],["self"]]]],[11,"rem_assign","","",5,[[["self"],["u32"]]]],[11,"rem_assign","","",5,[[["self"],["bigint"]]]],[11,"rem_assign","","",5,[[["self"],["i16"]]]],[11,"rem_assign","","",5,[[["self"],["i128"]]]],[11,"div_assign","","",5,[[["self"],["i8"]]]],[11,"div_assign","","",5,[[["self"],["u32"]]]],[11,"div_assign","","",5,[[["isize"],["self"]]]],[11,"div_assign","","",4,[[["self"],["usize"]]]],[11,"div_assign","","",5,[[["self"],["i16"]]]],[11,"div_assign","","",4,[[["self"],["u8"]]]],[11,"div_assign","","",5,[[["self"],["i32"]]]],[11,"div_assign","","",4,[[["self"],["u128"]]]],[11,"div_assign","","",4,[[["u16"],["self"]]]],[11,"div_assign","","",5,[[["u16"],["self"]]]],[11,"div_assign","","",5,[[["self"],["bigint"]]]],[11,"div_assign","","",4,[[["self"],["u64"]]]],[11,"div_assign","","",4,[[["biguint"],["self"]]]],[11,"div_assign","","",5,[[["self"],["u8"]]]],[11,"div_assign","","",5,[[["i64"],["self"]]]],[11,"div_assign","","",5,[[["self"],["u64"]]]],[11,"div_assign","","",4,[[["self"],["u32"]]]],[11,"div_assign","","",5,[[["self"],["u128"]]]],[11,"div_assign","","",5,[[["self"],["i128"]]]],[11,"div_assign","","",5,[[["self"],["bigint"]]]],[11,"div_assign","","",5,[[["self"],["usize"]]]],[11,"div_assign","","",4,[[["biguint"],["self"]]]],[11,"bitor","","",5,[[["bigint"]],["bigint"]]],[11,"bitor","","",4,[[["biguint"]],["biguint"]]],[11,"bitor","","",5,[[["bigint"]],["bigint"]]],[11,"bitor","","",4,[[["biguint"]],["biguint"]]],[11,"eq","","",3,[[["self"],["parsebiginterror"]],["bool"]]],[11,"ne","","",3,[[["self"],["parsebiginterror"]],["bool"]]],[11,"eq","","",1,[[["sign"],["self"]],["bool"]]],[11,"eq","","",4,[[["biguint"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["bigint"]],["bool"]]],[11,"new","","Creates and initializes a `BigUint`.",4,[[["vec",["u32"]],["u32"]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",4,[[],["biguint"]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",4,[[["self"]]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",4,[[],["biguint"]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",4,[[],["biguint"]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",4,[[["u32"]],[["biguint"],["option",["biguint"]]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",4,[[["u32"]],[["biguint"],["option",["biguint"]]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",4,[[["u32"]],[["biguint"],["option",["biguint"]]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",4,[[["self"]],[["vec",["u32"]],["u32"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",4,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",4,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",4,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,"bits","","Determines the fewest bits necessary to express the…",4,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",4,[[["biguint"],["self"]],["biguint"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",4,[[["self"]],["biguint"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",4,[[["self"]],["biguint"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",4,[[["u32"],["self"]],["biguint"]]],[11,"new","","Creates and initializes a BigInt.",5,[[["vec",["u32"]],["sign"],["u32"]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",5,[[["biguint"],["sign"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",5,[[["sign"]],["bigint"]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",5,[[["self"],["sign"]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",5,[[["sign"]],["bigint"]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",5,[[["sign"]],["bigint"]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",5,[[],["bigint"]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",5,[[],["bigint"]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",5,[[["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",5,[[["sign"],["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",5,[[["sign"],["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",5,[[["self"]]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",5,[[["self"]]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",5,[[["self"]]]],[11,"to_signed_bytes_be","","Returns the two's-complement byte representation of the…",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_signed_bytes_le","","Returns the two's-complement byte representation of the…",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",5,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",5,[[["u32"],["self"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",5,[[["u32"],["self"]]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",5,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the…",5,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not…",5,[[["self"]],[["biguint"],["option",["biguint"]]]]],[11,"checked_add","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_sub","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_mul","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_div","","",5,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",5,[[["self"],["bigint"]],["bigint"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",5,[[["self"]],["bigint"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",5,[[["self"]],["bigint"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",5,[[["u32"],["self"]],["bigint"]]]],"p":[[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"ParseBigIntError"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["forest_blocks"] = {"doc":"","i":[[3,"Block","forest_blocks","A complete block",null,null],[12,"header","","",0,null],[12,"bls_messages","","",0,null],[12,"secp_messages","","",0,null],[3,"TxMeta","","Tracks the merkleroots of both secp and bls messages…",null,null],[12,"bls_message_root","","",1,null],[12,"secp_message_root","","",1,null],[3,"BlockHeader","","Header of a block",null,null],[3,"BlockHeaderBuilder","","Builder for `BlockHeader`.",null,null],[3,"Ticket","","A Ticket is a marker of a tick of the blockchain's clock.…",null,null],[12,"vrfproof","","A proof output by running a VRF on the VDFResult of the…",2,null],[3,"EPostTicket","","PoSt election candidates",null,null],[12,"partial","","",3,null],[12,"sector_id","","",3,null],[12,"challenge_index","","",3,null],[3,"EPostProof","","Proof of Spacetime election proof",null,null],[12,"proof","","",4,null],[12,"post_rand","","",4,null],[12,"candidates","","",4,null],[3,"TipSetKeys","","A set of CIDs forming a unique key for a TipSet. Equal…",null,null],[12,"cids","","",5,null],[3,"Tipset","","An immutable set of blocks at the same height with the…",null,null],[3,"FullTipset","","FullTipSet is an expanded version of the TipSet that…",null,null],[4,"Error","","",null,null],[13,"InvalidTipSet","","Tipset contains invalid data, as described by the string…",6,null],[13,"NoBlocks","","The given tipset has no blocks",6,null],[13,"InvalidSignature","","Invalid signature",6,null],[13,"Validation","","Error in validating arbitrary data",6,null],[11,"header","","Returns reference to BlockHeader",0,[[["self"]],["blockheader"]]],[11,"bls_msgs","","Returns reference to unsigned messages",0,[[["self"]]]],[11,"secp_msgs","","Returns reference to signed Secp256k1 messages",0,[[["self"]]]],[11,"cid","","Returns cid for block from header",0,[[["self"]],["cid"]]],[11,"parents","","Parents is the set of parents this block was based on.…",7,[[["self"],["tipsetkeys"]],["self"]]],[11,"weight","","weight is the aggregate chain weight of the parent set",7,[[["biguint"],["self"]],["self"]]],[11,"epoch","","epoch is the period in which a new block is generated.…",7,[[["self"],["chainepoch"]],["self"]]],[11,"miner_address","","miner_address is the address of the miner actor that mined…",7,[[["self"],["address"]],["self"]]],[11,"messages","","messages contains the Cid to the merkle links for…",7,[[["self"],["cid"]],["self"]]],[11,"message_receipts","","message_receipts is the Cid of the root of an array of…",7,[[["self"],["cid"]],["self"]]],[11,"state_root","","state_root is a cid pointer to the parent state root after…",7,[[["self"],["cid"]],["self"]]],[11,"fork_signal","","",7,[[["self"],["u64"]],["self"]]],[11,"signature","","",7,[[["self"],["signature"]],["self"]]],[11,"epost_verify","","",7,[[["self"],["epostproof"]],["self"]]],[11,"timestamp","","timestamp, in seconds since the Unix epoch, at which this…",7,[[["self"],["u64"]],["self"]]],[11,"ticket","","the ticket submitted with this block",7,[[["self"],["ticket"]],["self"]]],[11,"bls_aggregate","","aggregate signature of miner in block",7,[[["self"],["signature"]],["self"]]],[11,"cached_cid","","stores the cid for the block after the first call to `cid()`",7,[[["self"],["cid"]],["self"]]],[11,"cached_bytes","","stores the hashed bytes of the block after the fist call…",7,[[["self"],["vec",["u8"]],["u8"]],["self"]]],[11,"build","","Builds a new `BlockHeader`.",7,[[["self"]],[["blockheader"],["string"],["result",["blockheader","string"]]]]],[11,"builder","","Generates a BlockHeader builder as a constructor",8,[[],["blockheaderbuilder"]]],[11,"parents","","Getter for BlockHeader parents",8,[[["self"]],["tipsetkeys"]]],[11,"weight","","Getter for BlockHeader weight",8,[[["self"]],["biguint"]]],[11,"epoch","","Getter for BlockHeader epoch",8,[[["self"]],["chainepoch"]]],[11,"miner_address","","Getter for BlockHeader miner_address",8,[[["self"]],["address"]]],[11,"messages","","Getter for BlockHeader messages",8,[[["self"]],["cid"]]],[11,"message_receipts","","Getter for BlockHeader message_receipts",8,[[["self"]],["cid"]]],[11,"state_root","","Getter for BlockHeader state_root",8,[[["self"]],["cid"]]],[11,"timestamp","","Getter for BlockHeader timestamp",8,[[["self"]],["u64"]]],[11,"ticket","","Getter for BlockHeader ticket",8,[[["self"]],["ticket"]]],[11,"bls_aggregate","","Getter for BlockHeader bls_aggregate",8,[[["self"]],["signature"]]],[11,"cid","","Getter for BlockHeader cid",8,[[["self"]],["cid"]]],[11,"fork_signal","","Getter for BlockHeader fork_signal",8,[[["self"]],["u64"]]],[11,"epost_verify","","Getter for BlockHeader epost_verify",8,[[["self"]],["epostproof"]]],[11,"signature","","Getter for BlockHeader signature",8,[[["self"]],["signature"]]],[11,"check_block_signature","","Check to ensure block signature is valid",8,[[["address"],["self"]],[["result",["error"]],["error"]]]],[11,"validate_timestamps","","Validates timestamps to ensure BlockHeader was generated…",8,[[["fulltipset"],["self"]],[["result",["error"]],["error"]]]],[11,"build_and_validate","","",7,[[["self"]],[["result",["blockheader","string"]],["blockheader"],["string"]]]],[11,"new","","Ticket constructor",2,[[["vrfresult"]],["self"]]],[11,"new","","",5,[[["cid"],["vec",["cid"]]],["self"]]],[11,"cids","","Returns tipset header cids",5,[[["self"]]]],[11,"new","","Builds a new TipSet from a collection of blocks. A valid…",9,[[["blockheader"],["vec",["blockheader"]]],[["result",["error"]],["error"]]]],[11,"epoch","","Returns epoch of the tipset",9,[[["self"]],["chainepoch"]]],[11,"blocks","","Returns all blocks in tipset",9,[[["self"]]]],[11,"min_timestamp","","Returns the smallest timestamp of all blocks in the tipset",9,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"is_empty","","Returns true if no blocks present in tipset",9,[[["self"]],["bool"]]],[11,"key","","Returns a key for the tipset.",9,[[["self"]],["tipsetkeys"]]],[11,"cids","","Returns slice of Cids for the current tipset",9,[[["self"]]]],[11,"parents","","Returns the CIDs of the parents of the blocks in the tipset",9,[[["self"]],["tipsetkeys"]]],[11,"parent_state","","Returns the state root for the tipset parent.",9,[[["self"]],["cid"]]],[11,"weight","","Returns the tipset's calculated weight",9,[[["self"]],["biguint"]]],[11,"new","","constructor",10,[[["vec",["block"]],["block"]],["self"]]],[11,"blocks","","Returns all blocks in a full tipset",10,[[["self"]]]],[11,"tipset","","Returns a Tipset",10,[[["self"]],[["result",["tipset","error"]],["tipset"],["error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",6,[[["timeerr"]],["error"]]],[11,"clone","","",0,[[["self"]],["block"]]],[11,"clone","","",8,[[["self"]],["blockheader"]]],[11,"clone","","",7,[[["self"]],["blockheaderbuilder"]]],[11,"clone","","",2,[[["self"]],["ticket"]]],[11,"clone","","",3,[[["self"]],["epostticket"]]],[11,"clone","","",4,[[["self"]],["epostproof"]]],[11,"clone","","",5,[[["self"]],["tipsetkeys"]]],[11,"clone","","",9,[[["self"]],["tipset"]]],[11,"clone","","",10,[[["self"]],["fulltipset"]]],[11,"default","","",7,[[],["blockheaderbuilder"]]],[11,"default","","",8,[[],["blockheader"]]],[11,"default","","",2,[[],["ticket"]]],[11,"default","","",3,[[],["epostticket"]]],[11,"default","","",4,[[],["epostproof"]]],[11,"default","","",5,[[],["tipsetkeys"]]],[11,"eq","","",0,[[["self"],["block"]],["bool"]]],[11,"ne","","",0,[[["self"],["block"]],["bool"]]],[11,"eq","","",6,[[["error"],["self"]],["bool"]]],[11,"ne","","",6,[[["error"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["blockheader"]],["bool"]]],[11,"ne","","",8,[[["self"],["blockheader"]],["bool"]]],[11,"eq","","",2,[[["self"],["ticket"]],["bool"]]],[11,"ne","","",2,[[["self"],["ticket"]],["bool"]]],[11,"eq","","",3,[[["self"],["epostticket"]],["bool"]]],[11,"ne","","",3,[[["self"],["epostticket"]],["bool"]]],[11,"eq","","",4,[[["self"],["epostproof"]],["bool"]]],[11,"ne","","",4,[[["self"],["epostproof"]],["bool"]]],[11,"eq","","",5,[[["self"],["tipsetkeys"]],["bool"]]],[11,"ne","","",5,[[["self"],["tipsetkeys"]],["bool"]]],[11,"eq","","",9,[[["tipset"],["self"]],["bool"]]],[11,"ne","","",9,[[["tipset"],["self"]],["bool"]]],[11,"eq","","",10,[[["fulltipset"],["self"]],["bool"]]],[11,"ne","","",10,[[["fulltipset"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["ticket"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["self"],["ticket"]],["bool"]]],[11,"le","","",2,[[["self"],["ticket"]],["bool"]]],[11,"gt","","",2,[[["self"],["ticket"]],["bool"]]],[11,"ge","","",2,[[["self"],["ticket"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",8,[[["s"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"serialize","","",4,[[["s"],["self"]],["result"]]],[11,"serialize","","",5,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"cid","","",8,[[["self"]],[["result",["cid","encodingerror"]],["cid"],["encodingerror"]]]]],"p":[[3,"Block"],[3,"TxMeta"],[3,"Ticket"],[3,"EPostTicket"],[3,"EPostProof"],[3,"TipSetKeys"],[4,"Error"],[3,"BlockHeaderBuilder"],[3,"BlockHeader"],[3,"Tipset"],[3,"FullTipset"]]};
searchIndex["forest_car"] = {"doc":"","i":[[3,"CarHeader","forest_car","CAR file header",null,null],[12,"roots","","",0,null],[12,"version","","",0,null],[3,"CarReader","","Reads CAR files that are in a BufReader",null,null],[12,"buf_reader","","",1,null],[12,"header","","",1,null],[3,"Block","","IPLD Block",null,null],[5,"load_car","","Loads a CAR buffer into a BlockStore",null,[[["bufreader"],["b"],["read"]],[["error"],["result",["error"]]]]],[11,"new","","Creates a new CAR file header",0,[[["cid"],["u64"],["vec",["cid"]]],["self"]]],[11,"new","","Creates a new CarReader and parses the CarHeader",1,[[["bufreader"]],[["result",["error"]],["error"]]]],[11,"next_block","","Returns the next IPLD Block in the buffer",1,[[["self"]],[["result",["block","error"]],["block"],["error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["block"]]],[11,"default","","",0,[[],["carheader"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"p":[[3,"CarHeader"],[3,"CarReader"],[3,"Block"]]};
searchIndex["forest_cid"] = {"doc":"","i":[[3,"Prefix","forest_cid","Prefix represents all metadata of a CID, without the…",null,null],[12,"version","","",0,null],[12,"codec","","",0,null],[12,"mh_type","","",0,null],[3,"Cid","","Representation of a IPLD CID.",null,null],[12,"version","","",1,null],[12,"codec","","",1,null],[12,"hash","","",1,null],[4,"Codec","","",null,null],[13,"Raw","","",2,null],[13,"DagProtobuf","","",2,null],[13,"DagCBOR","","",2,null],[13,"GitRaw","","",2,null],[13,"EthereumBlock","","",2,null],[13,"EthereumBlockList","","",2,null],[13,"EthereumTxTrie","","",2,null],[13,"EthereumTx","","",2,null],[13,"EthereumTxReceiptTrie","","",2,null],[13,"EthereumTxReceipt","","",2,null],[13,"EthereumStateTrie","","",2,null],[13,"EthereumAccountSnapshot","","",2,null],[13,"EthereumStorageTrie","","",2,null],[13,"BitcoinBlock","","",2,null],[13,"BitcoinTx","","",2,null],[13,"ZcashBlock","","",2,null],[13,"ZcashTx","","",2,null],[13,"DagJSON","","",2,null],[4,"Error","","Error types",null,null],[13,"UnknownCodec","","",3,null],[13,"InputTooShort","","",3,null],[13,"ParsingError","","",3,null],[13,"InvalidCidVersion","","",3,null],[13,"Other","","",3,null],[4,"Version","","Cid protocol version",null,null],[13,"V0","","",4,null],[13,"V1","","",4,null],[11,"from","","Convert a number to the matching codec",2,[[["u64"]],[["error"],["result",["codec","error"]],["codec"]]]],[11,"from","","Generates version from integer value",4,[[["u64"]],[["error"],["result",["version","error"]],["version"]]]],[11,"is_v0_str","","Returns true if string is version 0",4,[[["str"]],["bool"]]],[11,"is_v0_binary","","Returns true if bytes is version 0",4,[[],["bool"]]],[11,"new","","Create a new CID.",1,[[["multihash"],["codec"],["version"]],["cid"]]],[11,"new_from_cbor","","Constructs a cid with bytes using default version and codec",1,[[["multihashdigest"]],[["error"],["result",["error"]]]]],[11,"from_raw_cid","","Create a new CID from raw data (binary or multibase…",1,[[["cid"],["tryinto",["cid"]]],[["cid"],["result",["cid"]]]]],[11,"new_from_prefix","","Create a new CID from a prefix and some data.",1,[[["prefix"]],[["error"],["cid"],["result",["cid","error"]]]]],[11,"to_bytes","","Returns encoded bytes of a cid",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"prefix","","Returns prefix for Cid format",1,[[["self"]],["prefix"]]],[11,"key","","Returns cid in bytes to be stored in datastore",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"new_from_bytes","","Generate new prefix from encoded bytes",0,[[],[["result",["prefix","error"]],["prefix"],["error"]]]],[11,"as_bytes","","Encodes prefix to bytes",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["error"]],["error"]]],[11,"from","","",3,[[["error"]],["error"]]],[11,"from","","",3,[[["decodeownederror"]],["error"]]],[11,"from","","",3,[[["encodeerror"]],["error"]]],[11,"from","","",3,[[["decodeerror"]],["error"]]],[11,"clone","","",2,[[["self"]],["codec"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"clone","","",4,[[["self"]],["version"]]],[11,"clone","","",0,[[["self"]],["prefix"]]],[11,"clone","","",1,[[["self"]],["cid"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",2,[[["codec"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"eq","","",4,[[["version"],["self"]],["bool"]]],[11,"eq","","",0,[[["prefix"],["self"]],["bool"]]],[11,"ne","","",0,[[["prefix"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"try_from","","",1,[[["string"]],["result"]]],[11,"try_from","","",1,[[["str"]],["result"]]],[11,"try_from","","",1,[[["vec",["u8"]],["u8"]],["result"]]],[11,"try_from","","",1,[[],["result"]]],[11,"from_str","","",1,[[["str"]],[["error"],["result",["error"]]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]]],"p":[[3,"Prefix"],[3,"Cid"],[4,"Codec"],[4,"Error"],[4,"Version"]]};
searchIndex["forest_encoding"] = {"doc":"","i":[[0,"de","forest_encoding","Generic data structure deserialization framework.",null,null],[0,"value","forest_encoding::de","Building blocks for deserializing basic values using the…",null,null],[3,"Error","forest_encoding::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[8,"Error","forest_encoding::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",0,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",0,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",0,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",0,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",0,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",0,[[["str"]],["self"]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",0,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",0,[[["str"]],["self"]]],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",1,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",1,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",1,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",1,null],[13,"Char","","The input contained a `char` that was not expected.",1,null],[13,"Str","","The input contained a `&str` or `String` that was not…",1,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",1,null],[13,"Unit","","The input contained a unit `()` that was not expected.",1,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",1,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",1,null],[13,"Seq","","The input contained a sequence that was not expected.",1,null],[13,"Map","","The input contained a map that was not expected.",1,null],[13,"Enum","","The input contained an enum that was not expected.",1,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",1,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",1,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",1,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",1,null],[13,"Other","","A message stating what uncategorized thing the input…",1,null],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",2,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",3,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",4,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",4,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",5,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",5,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",5,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",5,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",5,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",5,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",5,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",5,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",5,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",5,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",5,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",5,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",5,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",5,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",5,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",5,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",5,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",5,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",5,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",5,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",5,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",5,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",5,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",5,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",5,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",5,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",5,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",5,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",5,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",6,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",6,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"visit_bool","","The input contains a boolean.",6,[[["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",6,[[["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",6,[[["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",6,[[["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",6,[[["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",6,[[["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",6,[[["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",6,[[["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",6,[[["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",6,[[["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",6,[[["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",6,[[["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",6,[[["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",6,[[["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",6,[[["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",6,[[["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",6,[[["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",6,[[],["result"]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",6,[[],["result"]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",6,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",6,[[],["result"]]],[11,"visit_some","","The input contains an optional that is present.",6,[[["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",6,[[],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",6,[[["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",6,[[["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",6,[[["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",6,[[["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",7,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",7,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",7,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",7,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",8,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[["self"],["k"]],[["result",["option"]],["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",8,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",8,[[["self"],["k"],["v"]],[["option"],["result",["option"]]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[["self"]],[["result",["option"]],["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",8,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",8,[[["self"]],[["option"],["result",["option"]]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",8,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",9,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",9,null],[10,"variant_seed","","`variant` is called to identify which variant to…",9,[[["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",9,[[],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",10,null],[10,"unit_variant","","Called when deserializing a variant with no values.",10,[[],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",10,[[["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",10,[[],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",10,[[["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",10,[[["v"]],["result"]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",11,null],[10,"into_deserializer","","Convert this value into a deserializer.",11,[[]]],[3,"IgnoredAny","","An efficient way of discarding data from a deserializer.",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[["self"]],[["option",["error"]],["error"]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],[["option",["error"]],["error"]]]],[0,"ser","forest_encoding","Generic data structure serialization framework.",null,null],[8,"Error","forest_encoding::ser","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",13,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",14,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",15,null],[16,"Error","","The error type when some error occurs during serialization.",15,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",15,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",15,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",15,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",15,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",15,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",15,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",15,null],[10,"serialize_bool","","Serialize a `bool` value.",15,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",15,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",15,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",15,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",15,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",15,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",15,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",15,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",15,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",15,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",15,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",15,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",15,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",15,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",15,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",15,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",15,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",15,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",15,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",15,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",15,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",15,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",15,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",15,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",15,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",15,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",15,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",15,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",15,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",15,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",15,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",15,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",15,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",15,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",16,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",16,null],[10,"serialize_element","","Serialize a sequence element.",16,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",16,[[],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",17,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",17,null],[10,"serialize_element","","Serialize a tuple element.",17,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",17,[[],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",18,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",18,null],[10,"serialize_field","","Serialize a tuple struct field.",18,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",18,[[],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",19,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",19,null],[10,"serialize_field","","Serialize a tuple variant field.",19,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",19,[[],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",20,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",20,null],[10,"serialize_key","","Serialize a map key.",20,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",20,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",20,[[["k"],["self"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",20,[[],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_field","","Serialize a struct field.",21,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",21,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",21,[[],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_field","","Serialize a struct variant field.",22,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",22,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",22,[[],["result"]]],[3,"Impossible","","Helper type for implementing a `Serializer` that does not…",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[["self"]],[["option",["error"]],["error"]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],[["option",["error"]],["error"]]]],[0,"error","forest_encoding","When serializing or deserializing CBOR goes wrong.",null,null],[3,"Error","forest_encoding::error","This type represents all possible errors that can occur…",null,null],[6,"Result","","Alias for a `Result` with the error type…",null,null],[4,"Category","","Categorizes the cause of a `serde_cbor::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes…",23,null],[13,"Syntax","","The error was caused by input that was not syntactically…",23,null],[13,"Data","","The error was caused by input data that was semantically…",23,null],[13,"Eof","","The error was caused by prematurely reaching the end of…",23,null],[5,"from_reader","forest_encoding","Decodes a value from CBOR data in a reader.",null,[[["r"]],[["result",["error"]],["error"]]]],[5,"from_slice","","Decodes a value from CBOR data in a slice.",null,[[],[["result",["error"]],["error"]]]],[0,"tags","","Support for cbor tags",null,null],[3,"Tagged","forest_encoding::tags","A value that is optionally tagged with a cbor tag",null,null],[12,"tag","","cbor tag",24,null],[12,"value","","value",24,null],[5,"current_cbor_tag","","function to get the current cbor tag",null,[[],[["u64"],["option",["u64"]]]]],[5,"to_vec","forest_encoding","Serializes a value to a vector.",null,[[["t"]],[["result",["vec","error"]],["error"],["vec",["u8"]]]]],[5,"to_writer","","Serializes a value to a writer.",null,[[["w"],["t"]],[["result",["error"]],["error"]]]],[0,"value","","CBOR values, keys and serialization routines.",null,null],[4,"Value","forest_encoding::value","The `Value` enum, a loosely typed way of representing any…",null,null],[13,"Null","","Represents the absence of a value or the value undefined.",25,null],[13,"Bool","","Represents a boolean value.",25,null],[13,"Integer","","Integer CBOR numbers.",25,null],[13,"Float","","Represents a floating point value.",25,null],[13,"Bytes","","Represents a byte string.",25,null],[13,"Text","","Represents an UTF-8 encoded string.",25,null],[13,"Array","","Represents an array of values.",25,null],[13,"Map","","Represents a map.",25,null],[13,"Tag","","Represents a tagged value",25,null],[5,"from_value","","Convert a `serde_cbor::Value` into a type `T`",null,[[["value"]],[["result",["error"]],["error"]]]],[5,"to_value","","Convert a `T` into `serde_cbor::Value` which is an enum…",null,[[["t"]],[["result",["value","error"]],["value"],["error"]]]],[4,"Error","forest_encoding","Error type for encoding and decoding data through any…",null,null],[13,"Unmarshalling","","",26,null],[12,"description","forest_encoding::Error","",27,null],[12,"protocol","","",27,null],[13,"Marshalling","forest_encoding","",26,null],[12,"description","forest_encoding::Error","",28,null],[12,"protocol","","",28,null],[4,"CodecProtocol","forest_encoding","CodecProtocol defines the protocol in which the data is…",null,null],[13,"Cbor","","",29,null],[5,"blake2b_variable","","Generates blake2b hash with provided size.",null,[[["usize"]],[["vec",["u8"]],["u8"]]]],[5,"blake2b_256","","Generates blake2b hash of fixed 32 bytes size.",null,[[]]],[8,"Cbor","","Cbor utility functions for serializable objects",null,null],[11,"marshal_cbor","","Marshalls cbor encodable object into cbor bytes",30,[[["self"]],[["result",["vec","error"]],["vec",["u8"]],["error"]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",30,[[],[["result",["error"]],["error"]]]],[11,"cid","","Returns the content identifier of the raw block of data…",30,[[["self"]],[["cid"],["error"],["result",["cid","error"]]]]],[11,"from","forest_encoding::de::value","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","forest_encoding::de","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"fmt","","",58,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"from","forest_encoding::ser","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","forest_encoding::error","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","forest_encoding::tags","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","forest_encoding::value","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","forest_encoding","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"serialize_field","forest_encoding::ser","",59,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"deserialize_any","forest_encoding::de::value","",54,[[["v"]],["result"]]],[11,"deserialize_bool","","",54,[[["v"]],["result"]]],[11,"deserialize_i8","","",54,[[["v"]],["result"]]],[11,"deserialize_i16","","",54,[[["v"]],["result"]]],[11,"deserialize_i32","","",54,[[["v"]],["result"]]],[11,"deserialize_i64","","",54,[[["v"]],["result"]]],[11,"deserialize_i128","","",54,[[["v"]],["result"]]],[11,"deserialize_u8","","",54,[[["v"]],["result"]]],[11,"deserialize_u16","","",54,[[["v"]],["result"]]],[11,"deserialize_u32","","",54,[[["v"]],["result"]]],[11,"deserialize_u64","","",54,[[["v"]],["result"]]],[11,"deserialize_u128","","",54,[[["v"]],["result"]]],[11,"deserialize_f32","","",54,[[["v"]],["result"]]],[11,"deserialize_f64","","",54,[[["v"]],["result"]]],[11,"deserialize_char","","",54,[[["v"]],["result"]]],[11,"deserialize_str","","",54,[[["v"]],["result"]]],[11,"deserialize_string","","",54,[[["v"]],["result"]]],[11,"deserialize_bytes","","",54,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",54,[[["v"]],["result"]]],[11,"deserialize_option","","",54,[[["v"]],["result"]]],[11,"deserialize_unit","","",54,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",54,[[["v"]],["result"]]],[11,"deserialize_tuple","","",54,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",54,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",54,[[["v"]],["result"]]],[11,"deserialize_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",54,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",54,[[["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["v"]],["result"]]],[11,"deserialize_char","","",38,[[["v"]],["result"]]],[11,"deserialize_str","","",38,[[["v"]],["result"]]],[11,"deserialize_string","","",38,[[["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["v"]],["result"]]],[11,"deserialize_option","","",38,[[["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["v"]],["result"]]],[11,"deserialize_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",38,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["v"]],["result"]]],[11,"deserialize_any","","",38,[[["v"]],["result"]]],[11,"deserialize_bool","","",47,[[["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["v"]],["result"]]],[11,"deserialize_char","","",47,[[["v"]],["result"]]],[11,"deserialize_str","","",47,[[["v"]],["result"]]],[11,"deserialize_string","","",47,[[["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["v"]],["result"]]],[11,"deserialize_option","","",47,[[["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["v"]],["result"]]],[11,"deserialize_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",47,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["v"]],["result"]]],[11,"deserialize_any","","",47,[[["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["v"]],["result"]]],[11,"deserialize_char","","",37,[[["v"]],["result"]]],[11,"deserialize_str","","",37,[[["v"]],["result"]]],[11,"deserialize_string","","",37,[[["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["v"]],["result"]]],[11,"deserialize_option","","",37,[[["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["v"]],["result"]]],[11,"deserialize_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",37,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["v"]],["result"]]],[11,"deserialize_any","","",37,[[["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["v"]],["result"]]],[11,"deserialize_char","","",43,[[["v"]],["result"]]],[11,"deserialize_str","","",43,[[["v"]],["result"]]],[11,"deserialize_string","","",43,[[["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["v"]],["result"]]],[11,"deserialize_option","","",43,[[["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["v"]],["result"]]],[11,"deserialize_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",43,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",56,[[["v"]],["result"]]],[11,"deserialize_seq","","",56,[[["v"]],["result"]]],[11,"deserialize_tuple","","",56,[[["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",56,[[["v"]],["result"]]],[11,"deserialize_i8","","",56,[[["v"]],["result"]]],[11,"deserialize_i16","","",56,[[["v"]],["result"]]],[11,"deserialize_i32","","",56,[[["v"]],["result"]]],[11,"deserialize_i64","","",56,[[["v"]],["result"]]],[11,"deserialize_i128","","",56,[[["v"]],["result"]]],[11,"deserialize_u8","","",56,[[["v"]],["result"]]],[11,"deserialize_u16","","",56,[[["v"]],["result"]]],[11,"deserialize_u32","","",56,[[["v"]],["result"]]],[11,"deserialize_u64","","",56,[[["v"]],["result"]]],[11,"deserialize_u128","","",56,[[["v"]],["result"]]],[11,"deserialize_f32","","",56,[[["v"]],["result"]]],[11,"deserialize_f64","","",56,[[["v"]],["result"]]],[11,"deserialize_char","","",56,[[["v"]],["result"]]],[11,"deserialize_str","","",56,[[["v"]],["result"]]],[11,"deserialize_string","","",56,[[["v"]],["result"]]],[11,"deserialize_bytes","","",56,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",56,[[["v"]],["result"]]],[11,"deserialize_option","","",56,[[["v"]],["result"]]],[11,"deserialize_unit","","",56,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",56,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",56,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",56,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",56,[[["v"]],["result"]]],[11,"deserialize_struct","","",56,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",56,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",56,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",56,[[["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["v"]],["result"]]],[11,"deserialize_char","","",33,[[["v"]],["result"]]],[11,"deserialize_str","","",33,[[["v"]],["result"]]],[11,"deserialize_string","","",33,[[["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["v"]],["result"]]],[11,"deserialize_option","","",33,[[["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["v"]],["result"]]],[11,"deserialize_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",33,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",33,[[["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["v"]],["result"]]],[11,"deserialize_char","","",36,[[["v"]],["result"]]],[11,"deserialize_str","","",36,[[["v"]],["result"]]],[11,"deserialize_string","","",36,[[["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["v"]],["result"]]],[11,"deserialize_option","","",36,[[["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["v"]],["result"]]],[11,"deserialize_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",36,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",57,[[["v"]],["result"]]],[11,"deserialize_enum","","",57,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",57,[[["v"]],["result"]]],[11,"deserialize_i8","","",57,[[["v"]],["result"]]],[11,"deserialize_i16","","",57,[[["v"]],["result"]]],[11,"deserialize_i32","","",57,[[["v"]],["result"]]],[11,"deserialize_i64","","",57,[[["v"]],["result"]]],[11,"deserialize_i128","","",57,[[["v"]],["result"]]],[11,"deserialize_u8","","",57,[[["v"]],["result"]]],[11,"deserialize_u16","","",57,[[["v"]],["result"]]],[11,"deserialize_u32","","",57,[[["v"]],["result"]]],[11,"deserialize_u64","","",57,[[["v"]],["result"]]],[11,"deserialize_u128","","",57,[[["v"]],["result"]]],[11,"deserialize_f32","","",57,[[["v"]],["result"]]],[11,"deserialize_f64","","",57,[[["v"]],["result"]]],[11,"deserialize_char","","",57,[[["v"]],["result"]]],[11,"deserialize_str","","",57,[[["v"]],["result"]]],[11,"deserialize_string","","",57,[[["v"]],["result"]]],[11,"deserialize_bytes","","",57,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",57,[[["v"]],["result"]]],[11,"deserialize_option","","",57,[[["v"]],["result"]]],[11,"deserialize_unit","","",57,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",57,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",57,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",57,[[["v"]],["result"]]],[11,"deserialize_tuple","","",57,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",57,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",57,[[["v"]],["result"]]],[11,"deserialize_struct","","",57,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",57,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",57,[[["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["v"]],["result"]]],[11,"deserialize_char","","",34,[[["v"]],["result"]]],[11,"deserialize_str","","",34,[[["v"]],["result"]]],[11,"deserialize_string","","",34,[[["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["v"]],["result"]]],[11,"deserialize_option","","",34,[[["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["v"]],["result"]]],[11,"deserialize_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",34,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["v"]],["result"]]],[11,"deserialize_any","","",34,[[["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["v"]],["result"]]],[11,"deserialize_char","","",41,[[["v"]],["result"]]],[11,"deserialize_str","","",41,[[["v"]],["result"]]],[11,"deserialize_string","","",41,[[["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["v"]],["result"]]],[11,"deserialize_option","","",41,[[["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["v"]],["result"]]],[11,"deserialize_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",41,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",50,[[["v"]],["result"]]],[11,"deserialize_enum","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",50,[[["v"]],["result"]]],[11,"deserialize_i8","","",50,[[["v"]],["result"]]],[11,"deserialize_i16","","",50,[[["v"]],["result"]]],[11,"deserialize_i32","","",50,[[["v"]],["result"]]],[11,"deserialize_i64","","",50,[[["v"]],["result"]]],[11,"deserialize_i128","","",50,[[["v"]],["result"]]],[11,"deserialize_u8","","",50,[[["v"]],["result"]]],[11,"deserialize_u16","","",50,[[["v"]],["result"]]],[11,"deserialize_u32","","",50,[[["v"]],["result"]]],[11,"deserialize_u64","","",50,[[["v"]],["result"]]],[11,"deserialize_u128","","",50,[[["v"]],["result"]]],[11,"deserialize_f32","","",50,[[["v"]],["result"]]],[11,"deserialize_f64","","",50,[[["v"]],["result"]]],[11,"deserialize_char","","",50,[[["v"]],["result"]]],[11,"deserialize_str","","",50,[[["v"]],["result"]]],[11,"deserialize_string","","",50,[[["v"]],["result"]]],[11,"deserialize_bytes","","",50,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",50,[[["v"]],["result"]]],[11,"deserialize_option","","",50,[[["v"]],["result"]]],[11,"deserialize_unit","","",50,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",50,[[["v"]],["result"]]],[11,"deserialize_tuple","","",50,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",50,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",50,[[["v"]],["result"]]],[11,"deserialize_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",50,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",50,[[["v"]],["result"]]],[11,"deserialize_bool","","",48,[[["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["v"]],["result"]]],[11,"deserialize_char","","",48,[[["v"]],["result"]]],[11,"deserialize_str","","",48,[[["v"]],["result"]]],[11,"deserialize_string","","",48,[[["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["v"]],["result"]]],[11,"deserialize_option","","",48,[[["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["v"]],["result"]]],[11,"deserialize_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",48,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["v"]],["result"]]],[11,"deserialize_any","","",48,[[["v"]],["result"]]],[11,"deserialize_enum","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["v"]],["result"]]],[11,"deserialize_char","","",44,[[["v"]],["result"]]],[11,"deserialize_str","","",44,[[["v"]],["result"]]],[11,"deserialize_string","","",44,[[["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["v"]],["result"]]],[11,"deserialize_option","","",44,[[["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["v"]],["result"]]],[11,"deserialize_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",44,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",53,[[["v"]],["result"]]],[11,"deserialize_bool","","",53,[[["v"]],["result"]]],[11,"deserialize_i8","","",53,[[["v"]],["result"]]],[11,"deserialize_i16","","",53,[[["v"]],["result"]]],[11,"deserialize_i32","","",53,[[["v"]],["result"]]],[11,"deserialize_i64","","",53,[[["v"]],["result"]]],[11,"deserialize_i128","","",53,[[["v"]],["result"]]],[11,"deserialize_u8","","",53,[[["v"]],["result"]]],[11,"deserialize_u16","","",53,[[["v"]],["result"]]],[11,"deserialize_u32","","",53,[[["v"]],["result"]]],[11,"deserialize_u64","","",53,[[["v"]],["result"]]],[11,"deserialize_u128","","",53,[[["v"]],["result"]]],[11,"deserialize_f32","","",53,[[["v"]],["result"]]],[11,"deserialize_f64","","",53,[[["v"]],["result"]]],[11,"deserialize_char","","",53,[[["v"]],["result"]]],[11,"deserialize_str","","",53,[[["v"]],["result"]]],[11,"deserialize_string","","",53,[[["v"]],["result"]]],[11,"deserialize_bytes","","",53,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",53,[[["v"]],["result"]]],[11,"deserialize_option","","",53,[[["v"]],["result"]]],[11,"deserialize_unit","","",53,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",53,[[["v"]],["result"]]],[11,"deserialize_tuple","","",53,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",53,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",53,[[["v"]],["result"]]],[11,"deserialize_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",53,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",53,[[["v"]],["result"]]],[11,"deserialize_enum","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["v"]],["result"]]],[11,"deserialize_char","","",40,[[["v"]],["result"]]],[11,"deserialize_str","","",40,[[["v"]],["result"]]],[11,"deserialize_string","","",40,[[["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["v"]],["result"]]],[11,"deserialize_option","","",40,[[["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["v"]],["result"]]],[11,"deserialize_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",40,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["v"]],["result"]]],[11,"deserialize_any","","",40,[[["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["v"]],["result"]]],[11,"deserialize_char","","",32,[[["v"]],["result"]]],[11,"deserialize_str","","",32,[[["v"]],["result"]]],[11,"deserialize_string","","",32,[[["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["v"]],["result"]]],[11,"deserialize_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",32,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",32,[[["v"]],["result"]]],[11,"deserialize_option","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",49,[[["v"]],["result"]]],[11,"deserialize_enum","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",49,[[["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["v"]],["result"]]],[11,"deserialize_char","","",49,[[["v"]],["result"]]],[11,"deserialize_str","","",49,[[["v"]],["result"]]],[11,"deserialize_string","","",49,[[["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["v"]],["result"]]],[11,"deserialize_option","","",49,[[["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["v"]],["result"]]],[11,"deserialize_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",49,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["v"]],["result"]]],[11,"deserialize_any","","",51,[[["v"]],["result"]]],[11,"deserialize_enum","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",51,[[["v"]],["result"]]],[11,"deserialize_i8","","",51,[[["v"]],["result"]]],[11,"deserialize_i16","","",51,[[["v"]],["result"]]],[11,"deserialize_i32","","",51,[[["v"]],["result"]]],[11,"deserialize_i64","","",51,[[["v"]],["result"]]],[11,"deserialize_i128","","",51,[[["v"]],["result"]]],[11,"deserialize_u8","","",51,[[["v"]],["result"]]],[11,"deserialize_u16","","",51,[[["v"]],["result"]]],[11,"deserialize_u32","","",51,[[["v"]],["result"]]],[11,"deserialize_u64","","",51,[[["v"]],["result"]]],[11,"deserialize_u128","","",51,[[["v"]],["result"]]],[11,"deserialize_f32","","",51,[[["v"]],["result"]]],[11,"deserialize_f64","","",51,[[["v"]],["result"]]],[11,"deserialize_char","","",51,[[["v"]],["result"]]],[11,"deserialize_str","","",51,[[["v"]],["result"]]],[11,"deserialize_string","","",51,[[["v"]],["result"]]],[11,"deserialize_bytes","","",51,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",51,[[["v"]],["result"]]],[11,"deserialize_option","","",51,[[["v"]],["result"]]],[11,"deserialize_unit","","",51,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",51,[[["v"]],["result"]]],[11,"deserialize_tuple","","",51,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",51,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",51,[[["v"]],["result"]]],[11,"deserialize_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",51,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",51,[[["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["v"]],["result"]]],[11,"deserialize_char","","",46,[[["v"]],["result"]]],[11,"deserialize_str","","",46,[[["v"]],["result"]]],[11,"deserialize_string","","",46,[[["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["v"]],["result"]]],[11,"deserialize_option","","",46,[[["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["v"]],["result"]]],[11,"deserialize_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",46,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["v"]],["result"]]],[11,"deserialize_any","","",46,[[["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["v"]],["result"]]],[11,"deserialize_char","","",35,[[["v"]],["result"]]],[11,"deserialize_str","","",35,[[["v"]],["result"]]],[11,"deserialize_string","","",35,[[["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["v"]],["result"]]],[11,"deserialize_option","","",35,[[["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["v"]],["result"]]],[11,"deserialize_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",35,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",52,[[["v"]],["result"]]],[11,"deserialize_enum","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",52,[[["v"]],["result"]]],[11,"deserialize_i8","","",52,[[["v"]],["result"]]],[11,"deserialize_i16","","",52,[[["v"]],["result"]]],[11,"deserialize_i32","","",52,[[["v"]],["result"]]],[11,"deserialize_i64","","",52,[[["v"]],["result"]]],[11,"deserialize_i128","","",52,[[["v"]],["result"]]],[11,"deserialize_u8","","",52,[[["v"]],["result"]]],[11,"deserialize_u16","","",52,[[["v"]],["result"]]],[11,"deserialize_u32","","",52,[[["v"]],["result"]]],[11,"deserialize_u64","","",52,[[["v"]],["result"]]],[11,"deserialize_u128","","",52,[[["v"]],["result"]]],[11,"deserialize_f32","","",52,[[["v"]],["result"]]],[11,"deserialize_f64","","",52,[[["v"]],["result"]]],[11,"deserialize_char","","",52,[[["v"]],["result"]]],[11,"deserialize_str","","",52,[[["v"]],["result"]]],[11,"deserialize_string","","",52,[[["v"]],["result"]]],[11,"deserialize_bytes","","",52,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",52,[[["v"]],["result"]]],[11,"deserialize_option","","",52,[[["v"]],["result"]]],[11,"deserialize_unit","","",52,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",52,[[["v"]],["result"]]],[11,"deserialize_tuple","","",52,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",52,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",52,[[["v"]],["result"]]],[11,"deserialize_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",52,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",52,[[["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["v"]],["result"]]],[11,"deserialize_char","","",45,[[["v"]],["result"]]],[11,"deserialize_str","","",45,[[["v"]],["result"]]],[11,"deserialize_string","","",45,[[["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["v"]],["result"]]],[11,"deserialize_option","","",45,[[["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["v"]],["result"]]],[11,"deserialize_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",45,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["v"]],["result"]]],[11,"deserialize_any","","",45,[[["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["v"]],["result"]]],[11,"deserialize_char","","",39,[[["v"]],["result"]]],[11,"deserialize_str","","",39,[[["v"]],["result"]]],[11,"deserialize_string","","",39,[[["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["v"]],["result"]]],[11,"deserialize_option","","",39,[[["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["v"]],["result"]]],[11,"deserialize_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",39,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",55,[[["v"]],["result"]]],[11,"deserialize_bool","","",55,[[["v"]],["result"]]],[11,"deserialize_i8","","",55,[[["v"]],["result"]]],[11,"deserialize_i16","","",55,[[["v"]],["result"]]],[11,"deserialize_i32","","",55,[[["v"]],["result"]]],[11,"deserialize_i64","","",55,[[["v"]],["result"]]],[11,"deserialize_i128","","",55,[[["v"]],["result"]]],[11,"deserialize_u8","","",55,[[["v"]],["result"]]],[11,"deserialize_u16","","",55,[[["v"]],["result"]]],[11,"deserialize_u32","","",55,[[["v"]],["result"]]],[11,"deserialize_u64","","",55,[[["v"]],["result"]]],[11,"deserialize_u128","","",55,[[["v"]],["result"]]],[11,"deserialize_f32","","",55,[[["v"]],["result"]]],[11,"deserialize_f64","","",55,[[["v"]],["result"]]],[11,"deserialize_char","","",55,[[["v"]],["result"]]],[11,"deserialize_str","","",55,[[["v"]],["result"]]],[11,"deserialize_string","","",55,[[["v"]],["result"]]],[11,"deserialize_bytes","","",55,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",55,[[["v"]],["result"]]],[11,"deserialize_option","","",55,[[["v"]],["result"]]],[11,"deserialize_unit","","",55,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",55,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",55,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",55,[[["v"]],["result"]]],[11,"deserialize_tuple","","",55,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",55,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",55,[[["v"]],["result"]]],[11,"deserialize_struct","","",55,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",55,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",55,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",55,[[["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["v"]],["result"]]],[11,"deserialize_char","","",42,[[["v"]],["result"]]],[11,"deserialize_str","","",42,[[["v"]],["result"]]],[11,"deserialize_string","","",42,[[["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["v"]],["result"]]],[11,"deserialize_option","","",42,[[["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["v"]],["result"]]],[11,"deserialize_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["v"]],["result"]]],[11,"deserialize_any","","",42,[[["v"]],["result"]]],[11,"variant_seed","","",57,[[["t"]],["result"]]],[11,"variant_seed","","",52,[[["t"]],["result"]]],[11,"variant_seed","","",51,[[["t"]],["result"]]],[11,"variant_seed","","",49,[[["t"]],["result"]]],[11,"variant_seed","","",50,[[["t"]],["result"]]],[11,"variant_seed","","",48,[[["t"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",46,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",51,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",37,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de","",58,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de::value","",45,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",50,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",32,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de::value","",36,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",53,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",40,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",48,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",42,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",52,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",34,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",49,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",55,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",54,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",39,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",33,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",41,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",56,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de","",2,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::de::value","",31,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"serialize_field","forest_encoding::ser","",59,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"expecting","forest_encoding::de","",58,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"visit_bool","","",58,[[["bool"]],["result"]]],[11,"visit_i64","","",58,[[["i64"]],["result"]]],[11,"visit_u64","","",58,[[["u64"]],["result"]]],[11,"visit_f64","","",58,[[["f64"]],["result"]]],[11,"visit_str","","",58,[[["str"]],["result"]]],[11,"visit_none","","",58,[[],["result"]]],[11,"visit_some","","",58,[[["d"]],["result"]]],[11,"visit_newtype_struct","","",58,[[["d"]],["result"]]],[11,"visit_unit","","",58,[[],["result"]]],[11,"visit_seq","","",58,[[["a"]],["result"]]],[11,"visit_map","","",58,[[["a"]],["result"]]],[11,"visit_bytes","","",58,[[],["result"]]],[11,"visit_enum","","",58,[[["a"]],["result"]]],[11,"description","forest_encoding::de::value","",31,[[["self"]],["str"]]],[11,"serialize_key","forest_encoding::ser","",59,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",59,[[["self"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"serialize_field","","",59,[[["self"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"clone","forest_encoding::de::value","",53,[[["self"]],["borrowedbytesdeserializer"]]],[11,"clone","","",50,[[["self"]],["borrowedstrdeserializer"]]],[11,"clone","","",44,[[["self"]],["f64deserializer"]]],[11,"clone","","",39,[[["self"]],["u8deserializer"]]],[11,"clone","","",46,[[["self"]],["i128deserializer"]]],[11,"clone","","",45,[[["self"]],["chardeserializer"]]],[11,"clone","","",35,[[["self"]],["i16deserializer"]]],[11,"clone","","",41,[[["self"]],["u64deserializer"]]],[11,"clone","","",31,[[["self"]],["error"]]],[11,"clone","","",38,[[["self"]],["isizedeserializer"]]],[11,"clone","","",52,[[["self"]],["cowstrdeserializer"]]],[11,"clone","","",55,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",33,[[["self"]],["booldeserializer"]]],[11,"clone","","",54,[[["self"]],["seqdeserializer"]]],[11,"clone","","",36,[[["self"]],["i32deserializer"]]],[11,"clone","","",57,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","","",37,[[["self"]],["i64deserializer"]]],[11,"clone","","",43,[[["self"]],["f32deserializer"]]],[11,"clone","","",47,[[["self"]],["u128deserializer"]]],[11,"clone","forest_encoding::de","",58,[[["self"]],["ignoredany"]]],[11,"clone","forest_encoding::de::value","",48,[[["self"]],["u32deserializer"]]],[11,"clone","","",40,[[["self"]],["u16deserializer"]]],[11,"clone","","",49,[[["self"]],["strdeserializer"]]],[11,"clone","forest_encoding::de","",1,[[["self"]],["unexpected"]]],[11,"clone","forest_encoding::de::value","",32,[[["self"]],["unitdeserializer"]]],[11,"clone","","",56,[[["self"]],["mapdeserializer"]]],[11,"clone","","",34,[[["self"]],["i8deserializer"]]],[11,"clone","","",42,[[["self"]],["usizedeserializer"]]],[11,"clone","","",51,[[["self"]],["stringdeserializer"]]],[11,"serialize_field","forest_encoding::ser","",59,[[["self"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"serialize_element","","",59,[[["self"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"serialize_element","","",59,[[["self"],["t"]],["result"]]],[11,"end","","",59,[[],["result"]]],[11,"default","forest_encoding::de","",58,[[],["ignoredany"]]],[11,"next_key_seed","forest_encoding::de::value","",56,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"next_value_seed","","",56,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",56,[[["tv"],["self"],["tk"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",56,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"custom","","",31,[[["t"]],["error"]]],[11,"deserialize","forest_encoding::de","",58,[[["d"]],[["ignoredany"],["result",["ignoredany"]]]]],[11,"next_element_seed","forest_encoding::de::value","",54,[[["self"],["v"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",54,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"next_element_seed","","",56,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",56,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"eq","forest_encoding::de","",1,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",1,[[["self"],["unexpected"]],["bool"]]],[11,"eq","forest_encoding::de::value","",31,[[["error"],["self"]],["bool"]]],[11,"ne","","",31,[[["error"],["self"]],["bool"]]],[11,"custom","","",31,[[["t"]],["error"]]],[11,"deserialize","forest_encoding::tags","",24,[[["d"]],[["result",["tagged"]],["tagged"]]]],[11,"deserialize","forest_encoding::value","",25,[[["d"]],[["result",["value"]],["value"]]]],[11,"fmt","forest_encoding::error","",60,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",23,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::value","",25,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","forest_encoding::error","",60,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"custom","","",60,[[["t"]],["error"]]],[11,"cmp","forest_encoding::value","",25,[[["value"],["self"]],["ordering"]]],[11,"source","forest_encoding::error","",60,[[["self"]],[["option",["error"]],["error"]]]],[11,"clone","forest_encoding::value","",25,[[["self"]],["value"]]],[11,"clone","forest_encoding::error","",23,[[["self"]],["category"]]],[11,"custom","","",60,[[["t"]],["error"]]],[11,"invalid_type","","",60,[[["unexpected"],["expected"]],["error"]]],[11,"serialize","forest_encoding::tags","",24,[[["s"],["self"]],["result"]]],[11,"serialize","forest_encoding::value","",25,[[["s"],["self"]],["result"]]],[11,"partial_cmp","","",25,[[["value"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"from","","",25,[[["string"]],["value"]]],[11,"from","","",25,[[["u8"]],["value"]]],[11,"from","","",25,[[["i32"]],["value"]]],[11,"from","","",25,[[["f32"]],["value"]]],[11,"from","","",25,[[["vec",["u8"]],["u8"]],["value"]]],[11,"from","","",25,[[["u16"]],["value"]]],[11,"from","","",25,[[["vec",["value"]],["value"]],["value"]]],[11,"from","","",25,[[["i8"]],["value"]]],[11,"from","","",25,[[["u32"]],["value"]]],[11,"from","","",25,[[["bool"]],["value"]]],[11,"from","","",25,[[["btreemap",["value","value"]],["value"]],["value"]]],[11,"from","forest_encoding::error","",60,[[["error"]],["error"]]],[11,"from","forest_encoding::value","",25,[[["u64"]],["value"]]],[11,"from","","",25,[[["i64"]],["value"]]],[11,"from","","",25,[[["i16"]],["value"]]],[11,"from","","",25,[[["f64"]],["value"]]],[11,"eq","","",25,[[["value"],["self"]],["bool"]]],[11,"eq","forest_encoding::error","",23,[[["category"],["self"]],["bool"]]],[11,"from","forest_encoding","",26,[[["cborerror"]],["error"]]],[11,"from","","",26,[[["ciderror"]],["error"]]],[11,"eq","","",26,[[["self"],["error"]],["bool"]]],[11,"ne","","",26,[[["self"],["error"]],["bool"]]],[11,"eq","","",29,[[["codecprotocol"],["self"]],["bool"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"new","forest_encoding::de::value","Create a new borrowed deserializer from the given string.",50,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",53,[[],["borrowedbytesdeserializer"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",54,[[["i"]],["seqdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",54,[[],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",55,[[["a"]],["seqaccessdeserializer"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",56,[[["i"]],["mapdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",56,[[],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",57,[[["a"]],["mapaccessdeserializer"]]],[11,"is","forest_encoding::ser","Returns `true` if the boxed type is the same as `T`",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",12,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["option"],["t"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["box",["error"]],["error"]],[["box",["error"]],["result",["box","box"]],["box"]]]],[11,"chain","","Returns an iterator starting with the current error and…",12,[[["self"]],["chain"]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["error"],["box",["error"]]],[["result",["box","box"]],["box",["error"]],["box"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["error"],["box",["error"]]],[["box",["error"]],["result",["box","box"]],["box"]]]],[11,"offset","forest_encoding::error","The byte offset at which the error occurred.",60,[[["self"]],["u64"]]],[11,"classify","","Categorizes the cause of this error.",60,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read…",60,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was…",60,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by data that was…",60,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely…",60,[[["self"]],["bool"]]],[11,"is_scratch_too_small","","Returns true if this error was caused by the scratch…",60,[[["self"]],["bool"]]],[11,"new","forest_encoding::tags","Create a new tagged value",24,[[["t"],["u64"],["option",["u64"]]],["tagged"]]],[11,"marshal_cbor","forest_encoding","Marshalls cbor encodable object into cbor bytes",30,[[["self"]],[["result",["vec","error"]],["vec",["u8"]],["error"]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",30,[[],[["result",["error"]],["error"]]]],[11,"cid","","Returns the content identifier of the raw block of data…",30,[[["self"]],[["cid"],["error"],["result",["cid","error"]]]]]],"p":[[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"StdError"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Category"],[3,"Tagged"],[4,"Value"],[4,"Error"],[13,"Unmarshalling"],[13,"Marshalling"],[4,"CodecProtocol"],[8,"Cbor"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Error"]]};
searchIndex["forest_ipld"] = {"doc":"","i":[[4,"Error","forest_ipld","",null,null],[13,"Encoding","","",0,null],[13,"Other","","",0,null],[4,"Ipld","","Represents IPLD data structure used when serializing and…",null,null],[13,"Null","","",1,null],[13,"Bool","","",1,null],[13,"Integer","","",1,null],[13,"Float","","",1,null],[13,"String","","",1,null],[13,"Bytes","","",1,null],[13,"List","","",1,null],[13,"Map","","",1,null],[13,"Link","","",1,null],[5,"to_ipld","","Convert any object into an IPLD object",null,[[["t"]],[["ipld"],["result",["ipld","error"]],["error"]]]],[5,"from_ipld","","Convert a `Ipld` structure into a type `T` Currently…",null,[[["ipld"]],[["result",["string"]],["string"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["ipld"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"eq","","",1,[[["ipld"],["self"]],["bool"]]],[11,"ne","","",1,[[["ipld"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"source","","",0,[[["self"]],[["error"],["option",["error"]]]]],[11,"custom","","",0,[[["display"]],["error"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]]],"p":[[4,"Error"],[4,"Ipld"]]};
searchIndex["forest_libp2p"] = {"doc":"","i":[[3,"ForestBehaviour","forest_libp2p","",null,null],[12,"gossipsub","","",0,null],[12,"mdns","","",0,null],[12,"ping","","",0,null],[12,"identify","","",0,null],[12,"rpc","","",0,null],[3,"Libp2pConfig","","",null,null],[12,"listening_multiaddr","","",1,null],[12,"bootstrap_peers","","",1,null],[12,"pubsub_topics","","",1,null],[3,"Libp2pService","","The Libp2pService listens to events from the Libp2p swarm.",null,null],[12,"swarm","","",2,null],[4,"ForestBehaviourEvent","","",null,null],[13,"PeerDialed","","",3,null],[13,"PeerDisconnected","","",3,null],[13,"DiscoveredPeer","","",3,null],[13,"ExpiredPeer","","",3,null],[13,"GossipMessage","","",3,null],[12,"source","forest_libp2p::ForestBehaviourEvent","",4,null],[12,"topics","","",4,null],[12,"message","","",4,null],[13,"RPC","forest_libp2p","",3,null],[4,"NetworkEvent","","Events emitted by this Service",null,null],[13,"PubsubMessage","","",5,null],[12,"source","forest_libp2p::NetworkEvent","",6,null],[12,"topics","","",6,null],[12,"message","","",6,null],[13,"RPCRequest","forest_libp2p","",5,null],[12,"req_id","forest_libp2p::NetworkEvent","",7,null],[12,"request","","",7,null],[13,"RPCResponse","forest_libp2p","",5,null],[12,"req_id","forest_libp2p::NetworkEvent","",8,null],[12,"response","","",8,null],[13,"Hello","forest_libp2p","",5,null],[12,"source","forest_libp2p::NetworkEvent","",9,null],[12,"message","","",9,null],[4,"NetworkMessage","forest_libp2p","Events into this Service",null,null],[13,"PubsubMessage","","",10,null],[12,"topic","forest_libp2p::NetworkMessage","",11,null],[12,"message","","",11,null],[13,"RPC","forest_libp2p","",10,null],[12,"peer_id","forest_libp2p::NetworkMessage","",12,null],[12,"event","","",12,null],[5,"build_transport","forest_libp2p","Builds the transport stack that LibP2P will communicate over",null,[[["keypair"]],[["boxed",["error"]],["error"]]]],[5,"get_keypair","","Fetch keypair from disk, returning none if it cannot be…",null,[[["str"]],[["option",["keypair"]],["keypair"]]]],[11,"new","","",0,[[["keypair"]],["self"]]],[11,"publish","","Publish data over the gossip network.",0,[[["self"],["topic"]]]],[11,"subscribe","","Subscribe to a gossip topic.",0,[[["self"],["topic"]],["bool"]]],[11,"send_rpc","","Send an RPC request or response to some peer.",0,[[["self"],["peerid"],["rpcevent"]]]],[0,"blocksync","","",null,null],[3,"BlockSyncRequest","forest_libp2p::blocksync","The payload that gets sent to another node to request for…",null,null],[12,"start","","The tipset to start sync from",13,null],[12,"request_len","","The amount of epochs to sync by",13,null],[12,"options","","1 = Block only, 2 = Messages only, 3 = Blocks and Messages",13,null],[3,"BlockSyncResponse","","The response to a BlockSync request.",null,null],[12,"chain","","The tipsets requested",14,null],[12,"status","","Error code",14,null],[12,"message","","Status message indicating failure reason",14,null],[3,"TipSetBundle","","Contains the blocks and messages in a particular tipset",null,null],[12,"blocks","","The blocks in the tipset",15,null],[12,"bls_msgs","","Signed bls messages",15,null],[12,"bls_msg_includes","","Describes which block each message belongs to",15,null],[12,"secp_msgs","","Unsigned secp messages",15,null],[12,"secp_msg_includes","","Describes which block each message belongs to",15,null],[11,"into_result","","",14,[[],[["vec",["fulltipset"]],["string"],["result",["vec","string"]]]]],[17,"BLOCKSYNC_PROTOCOL_ID","","",null,null],[0,"hello","forest_libp2p","",null,null],[3,"HelloMessage","forest_libp2p::hello","Hello message…",null,null],[12,"heaviest_tip_set","","",16,null],[12,"heaviest_tipset_height","","",16,null],[12,"heaviest_tipset_weight","","",16,null],[12,"genesis_hash","","",16,null],[3,"HelloResponse","","Response to a Hello",null,null],[12,"arrival","","Time of arrival in unix nanoseconds",17,null],[12,"sent","","Time sent in unix nanoseconds",17,null],[17,"HELLO_PROTOCOL_ID","","",null,null],[0,"rpc","forest_libp2p","",null,null],[3,"RPC","forest_libp2p::rpc","The RPC behaviour that gets consumed by the Swarm.",null,null],[3,"InboundCodec","","Codec used for inbound connections. Decodes the inbound…",null,null],[3,"OutboundCodec","","Codec used for outbound connections. Encodes the outbound…",null,null],[3,"RPCHandler","","",null,null],[4,"RPCMessage","","Messages sent to the user from the RPC protocol.",null,null],[13,"RPC","","",18,null],[13,"PeerDialed","","",18,null],[13,"PeerDisconnected","","",18,null],[4,"RPCError","","",null,null],[13,"Codec","","",19,null],[13,"Custom","","",19,null],[4,"RPCRequest","","RPCRequest payloads for request/response calls",null,null],[13,"BlockSync","","",20,null],[13,"Hello","","",20,null],[4,"RPCResponse","","RPCResponse payloads for request/response calls",null,null],[13,"BlockSync","","",21,null],[13,"Hello","","",21,null],[4,"RPCEvent","","The return type used in the behaviour and the resultant…",null,null],[13,"Request","","An inbound/outbound request for RPC protocol. The first…",22,null],[13,"Response","","A response that is being sent or has been received from…",22,null],[13,"Error","","Error in RPC request",22,null],[11,"new","","Creates a new RPC behaviour",23,[[],["self"]]],[11,"send_rpc","","Send an RPCEvent to a peer specified by peer_id.",23,[[["self"],["peerid"],["rpcevent"]]]],[11,"new","","",24,[[],["self"]]],[11,"new","","",25,[[],["self"]]],[11,"new","","Constructor for new RPC handler",26,[[["duration"]],["self"]]],[11,"pending_requests","","Returns the number of pending requests.",26,[[["self"]],["u32"]]],[11,"send_request","","Opens an outbound substream with a request.",26,[[["self"],["rpcevent"]]]],[11,"supported_protocols","","",20,[[["self"]],["vec"]]],[11,"expect_response","","",20,[[["self"]],["bool"]]],[6,"RequestId","","",null,null],[17,"RESPONSE_TIMEOUT","","The time (in seconds) before a substream that is awaiting…",null,null],[11,"id","","Returns the id which is used to track the substream",22,[[["self"]],["usize"]]],[11,"new","forest_libp2p","Constructs a Libp2pService",2,[[["keypair"],["libp2pconfig"]],["self"]]],[11,"run","","Starts the `Libp2pService` networking stack. This Future…",2,[[]]],[11,"network_sender","","Returns a `Sender` allowing you to send messages over…",2,[[["self"]],[["networkmessage"],["sender",["networkmessage"]]]]],[11,"network_receiver","","Returns a `Receiver` to listen to network events",2,[[["self"]],[["receiver",["networkevent"]],["networkevent"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","forest_libp2p::blocksync","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","forest_libp2p::hello","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"clear","","",16,[[["self"]]]],[11,"initialize","","",16,[[]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","forest_libp2p::rpc","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"clear","","",23,[[["self"]]]],[11,"initialize","","",23,[[]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"clear","","",26,[[["self"]]]],[11,"initialize","","",26,[[]]],[11,"into_handler","","",26,[[["connectedpoint"],["peerid"]],["t"]]],[11,"inbound_protocol","","",26,[[["self"]]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"as_fail","","",19,[[["self"]],["fail"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",19,[[["error"]],["self"]]],[11,"from","","",19,[[["encodingerror"]],["self"]]],[11,"clone","forest_libp2p::blocksync","",13,[[["self"]],["blocksyncrequest"]]],[11,"clone","","",14,[[["self"]],["blocksyncresponse"]]],[11,"clone","","",15,[[["self"]],["tipsetbundle"]]],[11,"clone","forest_libp2p::hello","",16,[[["self"]],["hellomessage"]]],[11,"clone","","",17,[[["self"]],["helloresponse"]]],[11,"clone","forest_libp2p::rpc","",19,[[["self"]],["rpcerror"]]],[11,"clone","","",21,[[["self"]],["rpcresponse"]]],[11,"clone","","",20,[[["self"]],["rpcrequest"]]],[11,"clone","","",22,[[["self"]],["rpcevent"]]],[11,"clone","forest_libp2p","",5,[[["self"]],["networkevent"]]],[11,"clone","","",10,[[["self"]],["networkmessage"]]],[11,"default","","",1,[[],["self"]]],[11,"default","forest_libp2p::hello","",16,[[],["hellomessage"]]],[11,"default","forest_libp2p::rpc","",23,[[],["self"]]],[11,"default","","",26,[[],["self"]]],[11,"eq","forest_libp2p::blocksync","",13,[[["self"],["blocksyncrequest"]],["bool"]]],[11,"ne","","",13,[[["self"],["blocksyncrequest"]],["bool"]]],[11,"eq","","",14,[[["blocksyncresponse"],["self"]],["bool"]]],[11,"ne","","",14,[[["blocksyncresponse"],["self"]],["bool"]]],[11,"eq","","",15,[[["tipsetbundle"],["self"]],["bool"]]],[11,"ne","","",15,[[["tipsetbundle"],["self"]],["bool"]]],[11,"eq","forest_libp2p::hello","",16,[[["hellomessage"],["self"]],["bool"]]],[11,"ne","","",16,[[["hellomessage"],["self"]],["bool"]]],[11,"eq","","",17,[[["helloresponse"],["self"]],["bool"]]],[11,"ne","","",17,[[["helloresponse"],["self"]],["bool"]]],[11,"eq","forest_libp2p::rpc","",19,[[["self"],["rpcerror"]],["bool"]]],[11,"ne","","",19,[[["self"],["rpcerror"]],["bool"]]],[11,"eq","","",21,[[["rpcresponse"],["self"]],["bool"]]],[11,"ne","","",21,[[["rpcresponse"],["self"]],["bool"]]],[11,"eq","","",20,[[["rpcrequest"],["self"]],["bool"]]],[11,"ne","","",20,[[["rpcrequest"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["rpcevent"]],["bool"]]],[11,"ne","","",22,[[["self"],["rpcevent"]],["bool"]]],[11,"fmt","forest_libp2p","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p::blocksync","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p::hello","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p::rpc","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","forest_libp2p::rpc","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"description","","",19,[[["self"]],["str"]]],[11,"upgrade_outbound","","",20,[[["tsocket"]]]],[11,"protocol_info","","",20,[[["self"]]]],[11,"deserialize","forest_libp2p::blocksync","",13,[[["d"]],["result"]]],[11,"deserialize","","",14,[[["d"]],["result"]]],[11,"deserialize","","",15,[[["d"]],["result"]]],[11,"deserialize","forest_libp2p","",1,[[["__d"]],["result"]]],[11,"deserialize","forest_libp2p::hello","",16,[[["d"]],["result"]]],[11,"deserialize","","",17,[[["d"]],["result"]]],[11,"serialize","forest_libp2p::blocksync","",13,[[["s"],["self"]],["result"]]],[11,"serialize","","",14,[[["s"],["self"]],["result"]]],[11,"serialize","","",15,[[["s"],["self"]],["result"]]],[11,"serialize","forest_libp2p::hello","",16,[[["s"],["self"]],["result"]]],[11,"serialize","","",17,[[["s"],["self"]],["result"]]],[11,"listen_protocol","forest_libp2p::rpc","",26,[[["self"]],["substreamprotocol"]]],[11,"inject_fully_negotiated_inbound","","",26,[[["self"]]]],[11,"inject_fully_negotiated_outbound","","",26,[[["self"]]]],[11,"inject_event","","",26,[[["self"]]]],[11,"inject_dial_upgrade_error","","",26,[[["protocolshandlerupgrerr"],["self"]]]],[11,"connection_keep_alive","","",26,[[["self"]],["keepalive"]]],[11,"poll","","",26,[[["self"],["context"]],[["poll",["protocolshandlerevent"]],["protocolshandlerevent"]]]],[11,"new_handler","forest_libp2p","",0,[[["self"]]]],[11,"addresses_of_peer","","",0,[[["self"],["peerid"]],[["vec",["multiaddr"]],["multiaddr"]]]],[11,"inject_connected","","",0,[[["self"],["peerid"],["connectedpoint"]]]],[11,"inject_disconnected","","",0,[[["self"],["connectedpoint"],["peerid"]]]],[11,"inject_replaced","","",0,[[["self"],["peerid"],["connectedpoint"]]]],[11,"inject_addr_reach_failure","","",0,[[["option",["peerid"]],["error"],["self"],["multiaddr"],["peerid"]]]],[11,"inject_dial_failure","","",0,[[["self"],["peerid"]]]],[11,"inject_new_listen_addr","","",0,[[["self"],["multiaddr"]]]],[11,"inject_expired_listen_addr","","",0,[[["self"],["multiaddr"]]]],[11,"inject_new_external_addr","","",0,[[["self"],["multiaddr"]]]],[11,"inject_listener_error","","",0,[[["listenerid"],["self"],["error"]]]],[11,"inject_listener_closed","","",0,[[["listenerid"],["self"]]]],[11,"inject_node_event","","",0,[[["self"],["peerid"]]]],[11,"poll","","",0,[[["context"],["self"]],[["poll",["networkbehaviouraction"]],["networkbehaviouraction"]]]],[11,"new_handler","forest_libp2p::rpc","",23,[[["self"]]]],[11,"addresses_of_peer","","",23,[[["self"],["peerid"]],[["vec",["multiaddr"]],["multiaddr"]]]],[11,"inject_connected","","",23,[[["self"],["peerid"],["connectedpoint"]]]],[11,"inject_disconnected","","",23,[[["self"],["peerid"],["connectedpoint"]]]],[11,"inject_node_event","","",23,[[["self"],["peerid"]]]],[11,"poll","","",23,[[["self"],["context"]],[["networkbehaviouraction"],["poll",["networkbehaviouraction"]]]]],[11,"inject_event","forest_libp2p","",0,[[["self"],["mdnsevent"]]]],[11,"inject_event","","",0,[[["self"],["gossipsubevent"]]]],[11,"inject_event","","",0,[[["self"],["pingevent"]]]],[11,"inject_event","","",0,[[["self"],["identifyevent"]]]],[11,"inject_event","","",0,[[["self"],["rpcmessage"]]]],[11,"decode","forest_libp2p::rpc","",24,[[["bytesmut"],["self"]],[["option"],["result",["option"]]]]],[11,"decode","","",25,[[["bytesmut"],["self"]],[["option"],["result",["option"]]]]],[11,"encode","","",24,[[["self"],["bytesmut"]],["result"]]],[11,"encode","","",25,[[["self"],["bytesmut"]],["result"]]]],"p":[[3,"ForestBehaviour"],[3,"Libp2pConfig"],[3,"Libp2pService"],[4,"ForestBehaviourEvent"],[13,"GossipMessage"],[4,"NetworkEvent"],[13,"PubsubMessage"],[13,"RPCRequest"],[13,"RPCResponse"],[13,"Hello"],[4,"NetworkMessage"],[13,"PubsubMessage"],[13,"RPC"],[3,"BlockSyncRequest"],[3,"BlockSyncResponse"],[3,"TipSetBundle"],[3,"HelloMessage"],[3,"HelloResponse"],[4,"RPCMessage"],[4,"RPCError"],[4,"RPCRequest"],[4,"RPCResponse"],[4,"RPCEvent"],[3,"RPC"],[3,"InboundCodec"],[3,"OutboundCodec"],[3,"RPCHandler"]]};
searchIndex["forest_message"] = {"doc":"","i":[[3,"MessageReceipt","forest_message","Result of a state transition from a message",null,null],[12,"exit_code","","",0,null],[12,"return_data","","",0,null],[12,"gas_used","","",0,null],[3,"SignedMessage","","Represents a wrapped message with signature bytes",null,null],[3,"UnsignedMessage","","Default Unsigned VM message type which includes all data…",null,null],[3,"MessageBuilder","","Builder for `UnsignedMessage`.",null,null],[3,"TupleUnsignedMessage","","",null,null],[11,"new","","",1,[[["s"],["unsignedmessage"]],[["cryptoerror"],["result",["cryptoerror"]]]]],[11,"message","","",1,[[["self"]],["unsignedmessage"]]],[11,"signature","","",1,[[["self"]],["signature"]]],[11,"from","","",2,[[["self"],["address"]],["self"]]],[11,"to","","",2,[[["self"],["address"]],["self"]]],[11,"sequence","","",2,[[["self"],["u64"]],["self"]]],[11,"value","","",2,[[["self"],["tokenamount"]],["self"]]],[11,"method_num","","",2,[[["self"],["methodnum"]],["self"]]],[11,"params","","",2,[[["self"],["serialized"]],["self"]]],[11,"gas_price","","",2,[[["self"],["biguint"]],["self"]]],[11,"gas_limit","","",2,[[["self"],["biguint"]],["self"]]],[11,"build","","Builds a new `UnsignedMessage`.",2,[[["self"]],[["string"],["unsignedmessage"],["result",["unsignedmessage","string"]]]]],[11,"builder","","",3,[[],["messagebuilder"]]],[8,"Message","","",null,null],[10,"from","","Returns the from address of the message",4,[[["self"]],["address"]]],[10,"to","","Returns the destination address of the message",4,[[["self"]],["address"]]],[10,"sequence","","Returns the message sequence or nonce",4,[[["self"]],["u64"]]],[10,"value","","Returns the amount sent in message",4,[[["self"]],["tokenamount"]]],[10,"method_num","","Returns the method number to be called",4,[[["self"]],["methodnum"]]],[10,"params","","Returns the encoded parameters for the method call",4,[[["self"]],["serialized"]]],[10,"gas_price","","gas_price returns gas price for the message",4,[[["self"]],["biguint"]]],[10,"gas_limit","","Returns the gas limit for the message",4,[[["self"]],["biguint"]]],[10,"required_funds","","Returns the required funds for the message",4,[[["self"]],["biguint"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",1,[[["self"]],["address"]]],[11,"to","","",1,[[["self"]],["address"]]],[11,"sequence","","",1,[[["self"]],["u64"]]],[11,"value","","",1,[[["self"]],["tokenamount"]]],[11,"method_num","","",1,[[["self"]],["methodnum"]]],[11,"params","","",1,[[["self"]],["serialized"]]],[11,"gas_price","","",1,[[["self"]],["biguint"]]],[11,"gas_limit","","",1,[[["self"]],["biguint"]]],[11,"required_funds","","",1,[[["self"]],["biguint"]]],[11,"from","","",3,[[["self"]],["address"]]],[11,"to","","",3,[[["self"]],["address"]]],[11,"sequence","","",3,[[["self"]],["u64"]]],[11,"value","","",3,[[["self"]],["tokenamount"]]],[11,"method_num","","",3,[[["self"]],["methodnum"]]],[11,"params","","",3,[[["self"]],["serialized"]]],[11,"gas_price","","",3,[[["self"]],["biguint"]]],[11,"gas_limit","","",3,[[["self"]],["biguint"]]],[11,"required_funds","","",3,[[["self"]],["biguint"]]],[11,"clone","","",0,[[["self"]],["messagereceipt"]]],[11,"clone","","",1,[[["self"]],["signedmessage"]]],[11,"clone","","",3,[[["self"]],["unsignedmessage"]]],[11,"clone","","",2,[[["self"]],["messagebuilder"]]],[11,"default","","",2,[[],["messagebuilder"]]],[11,"eq","","",0,[[["self"],["messagereceipt"]],["bool"]]],[11,"ne","","",0,[[["self"],["messagereceipt"]],["bool"]]],[11,"eq","","",1,[[["self"],["signedmessage"]],["bool"]]],[11,"ne","","",1,[[["self"],["signedmessage"]],["bool"]]],[11,"eq","","",3,[[["self"],["unsignedmessage"]],["bool"]]],[11,"ne","","",3,[[["self"],["unsignedmessage"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]]],"p":[[3,"MessageReceipt"],[3,"SignedMessage"],[3,"MessageBuilder"],[3,"UnsignedMessage"],[8,"Message"],[3,"TupleUnsignedMessage"]]};
searchIndex["interpreter"] = {"doc":"","i":[[3,"VMInterpreter","interpreter","Interpreter which handles execution of state transitioning…",null,null],[3,"BlockMessages","","Represents the messages from one block in a tipset.",null,null],[3,"TipSetMessages","","Represents the messages from a tipset, grouped by block.",null,null],[11,"apply_tip_set_messages","","Apply all messages from a tipset Returns result StateTree…",0,[[["st"],["tipset"],["tipsetmessages"]]]],[11,"apply_message","","Applies the state transition for a single message Returns…",0,[[["address"],["chainstore"],["st"],["unsignedmessage"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]]],"p":[[3,"VMInterpreter"],[3,"BlockMessages"],[3,"TipSetMessages"]]};
searchIndex["ipld_amt"] = {"doc":"AMT crate for use as rust IPLD data structure","i":[[3,"AMT","ipld_amt","Array Mapped Trie allows for the insertion and persistence…",null,null],[3,"BitMap","","Map of bits to indicate which indexes contain values and…",null,null],[4,"Error","","AMT Error",null,null],[13,"OutOfRange","","Index referenced it above arbitrary max set",0,null],[13,"Cbor","","Cbor encoding error",0,null],[13,"Cid","","Error generating a Cid for data",0,null],[13,"Db","","Error interacting with underlying database",0,null],[13,"Cached","","Error when trying to serialize an AMT without a flushed…",0,null],[13,"Custom","","Custom AMT error",0,null],[11,"new","","Constructor for Root AMT node",1,[[["db"]],["self"]]],[11,"load","","Constructs an AMT with a blockstore and a Cid of the root…",1,[[["db"],["cid"]],[["result",["error"]],["error"]]]],[11,"height","","",1,[[["self"]],["u32"]]],[11,"count","","",1,[[["self"]],["u64"]]],[11,"new_from_slice","","Generates an AMT with block store and array of cbor…",1,[[["db"]],[["result",["cid","error"]],["cid"],["error"]]]],[11,"get","","Get value at index of AMT",1,[[["self"],["u64"]],[["result",["option","error"]],["option"],["error"]]]],[11,"set","","Set value at index",1,[[["self"],["u64"],["v"]],[["result",["error"]],["error"]]]],[11,"batch_set","","Batch set (naive for now)",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"delete","","Delete item from AMT at index",1,[[["self"],["u64"]],[["result",["bool","error"]],["error"],["bool"]]]],[11,"flush","","flush root and return Cid used as key in block store",1,[[["self"]],[["result",["cid","error"]],["cid"],["error"]]]],[11,"new","","Constructor with predefined map",2,[[["u8"]],["self"]]],[11,"to_byte_array","","Converts bitmap to array of bytes",2,[[]]],[11,"is_empty","","Checks if bitmap is empty",2,[[],["bool"]]],[11,"get_bit","","Get bit from bitmap by index",2,[[["u64"]],["bool"]]],[11,"set_bit","","Set bit in bitmap for index",2,[[["self"],["u64"]]]],[11,"clear_bit","","Clear bit at index for bitmap",2,[[["self"],["u64"]]]],[17,"MAX_INDEX","","",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",0,[[["dberror"]],["error"]]],[11,"from","","",0,[[["ciderror"]],["error"]]],[11,"from","","",0,[[["encodingerror"]],["error"]]],[11,"clone","","",2,[[["self"]],["bitmap"]]],[11,"default","","",2,[[],["bitmap"]]],[11,"eq","","",2,[[["bitmap"],["self"]],["bool"]]],[11,"ne","","",2,[[["bitmap"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]]],"p":[[4,"Error"],[3,"AMT"],[3,"BitMap"]]};
searchIndex["ipld_blockstore"] = {"doc":"","i":[[8,"BlockStore","ipld_blockstore","Wrapper for database to handle inserting and retrieving…",null,null],[11,"get_bytes","","Get bytes from block store by Cid",0,[[["self"],["cid"]],[["result",["option","error"]],["error"],["option",["vec"]]]]],[11,"get","","Get typed object from block store by Cid",0,[[["self"],["cid"]],[["result",["option","error"]],["option"],["error"]]]],[11,"put","","Put an object in the block store and return the Cid…",0,[[["s"],["self"],["t"]],[["result",["cid","error"]],["cid"],["error"]]]]],"p":[[8,"BlockStore"]]};
searchIndex["ipld_hamt"] = {"doc":"HAMT crate for use as rust IPLD data structure","i":[[3,"Hamt","ipld_hamt","Implementation of the HAMT data structure for IPLD.",null,null],[4,"Error","","HAMT Error",null,null],[13,"MaxDepth","","Maximum depth error",0,null],[13,"Db","","Error interacting with underlying database",0,null],[13,"Encoding","","Error encoding/ decoding values in store",0,null],[13,"Custom","","Custom HAMT error",0,null],[11,"new","","",1,[[["bs"]],["self"]]],[11,"new_with_bit_width","","Construct hamt with a bit width",1,[[["u8"],["bs"]],["self"]]],[11,"load","","Lazily instantiate a hamt from this root Cid.",1,[[["cid"],["bs"]],[["result",["error"]],["error"]]]],[11,"load_with_bit_width","","Lazily instantiate a hamt from this root Cid with a…",1,[[["cid"],["u8"],["bs"]],[["result",["error"]],["error"]]]],[11,"set_root","","Sets the root based on the Cid of the root node using the…",1,[[["cid"],["self"]],[["error"],["result",["error"]]]]],[11,"store","","Returns a reference to the underlying store of the Hamt.",1,[[["self"]],["bs"]]],[11,"set","","Inserts a key-value pair into the HAMT.",1,[[["self"],["k"],["s"]],[["error"],["result",["error"]]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["q"]],[["result",["option","error"]],["option"],["error"]]]],[11,"delete","","Removes a key from the HAMT, returning the value at the…",1,[[["self"],["q"]],[["result",["bool","error"]],["error"],["bool"]]]],[11,"flush","","Flush root and return Cid for hamt",1,[[["self"]],[["error"],["cid"],["result",["cid","error"]]]]],[11,"is_empty","","Returns true if the HAMT has no entries",1,[[["self"]],["bool"]]],[17,"DEFAULT_BIT_WIDTH","","Default bit width for indexing a hash at each depth level",null,null],[8,"Hash","","Custom trait to avoid issues like…",null,null],[10,"hash","","",2,[[["self"],["h"]]]],[11,"hash_slice","","",2,[[["h"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",0,[[["dberror"]],["error"]]],[11,"from","","",0,[[["cborerror"]],["error"]]],[11,"from","","",0,[[["iplderror"]],["error"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"hash_slice","","",2,[[["h"]]]]],"p":[[4,"Error"],[3,"Hamt"],[8,"Hash"]]};
searchIndex["node"] = {"doc":"","i":[],"p":[]};
searchIndex["runtime"] = {"doc":"","i":[[3,"Randomness","runtime","",null,null],[3,"Syscalls","","Pure functions implemented as primitives by the runtime.",null,null],[3,"ConsensusFault","","Result of checking two headers for a consensus fault.",null,null],[12,"target","","Address of the miner at fault (always an ID address).",0,null],[12,"epoch","","Epoch of the fault, which is the higher epoch of the two…",0,null],[12,"fault_type","","Type of fault.",0,null],[4,"ConsensusFaultType","","Consensus fault types in VM.",null,null],[13,"DoubleForkMining","","",1,null],[13,"ParentGrinding","","",1,null],[13,"TimeOffsetMining","","",1,null],[8,"ActorCode","","Interface for invoking methods on an Actor",null,null],[10,"invoke_method","","Invokes method with runtime on the actor's code. Method…",2,[[["serialized"],["methodnum"],["self"],["rt"]],["serialized"]]],[8,"Runtime","","Runtime is the VM's internal runtime object. this is…",null,null],[10,"message","","Information related to the current message being executed.",3,[[["self"]],["unsignedmessage"]]],[10,"curr_epoch","","The current chain epoch number. The genesis block has…",3,[[["self"]],["chainepoch"]]],[10,"validate_immediate_caller_accept_any","","Validates the caller against some predicate. Exported…",3,[[["self"]]]],[10,"validate_immediate_caller_is","","",3,[[["i"],["self"]]]],[10,"validate_immediate_caller_type","","",3,[[["i"],["self"]]]],[10,"current_balance","","The balance of the receiver.",3,[[["self"]],["tokenamount"]]],[10,"resolve_address","","Resolves an address of any protocol to an ID address (via…",3,[[["self"],["address"]],[["option",["address"]],["address"]]]],[10,"get_actor_code_cid","","Look up the code ID at an actor address.",3,[[["self"],["address"]],[["option",["cid"]],["cid"]]]],[10,"get_randomness","","Randomness returns a (pseudo)random byte array drawing…",3,[[["domainseparationtag"],["chainepoch"]],["randomness"]]],[10,"create","","Initializes the state object. This is only valid in a…",3,[[["self"],["c"]]]],[10,"state","","Loads a readonly copy of the state of the receiver into…",3,[[["self"]],["cbor"]]],[10,"transaction","","Loads a mutable version of the state into the `obj`…",3,[[["self"],["f"]],["r"]]],[10,"store","","Returns reference to blockstore",3,[[["self"]],["bs"]]],[10,"send","","Sends a message to another actor, returning the exit code…",3,[[["serialized"],["tokenamount"],["methodnum"],["self"],["address"]]]],[10,"abort","","Halts execution upon an error from which the receiver…",3,[[["exitcode"],["self"],["string"]]]],[10,"new_actor_address","","Computes an address for a new actor. The returned address…",3,[[["self"]],["address"]]],[10,"create_actor","","Creates an actor with code `codeID` and address `address`,…",3,[[["cid"],["self"],["address"]]]],[10,"delete_actor","","Deletes the executing actor from the state tree. May only…",3,[[["self"]]]],[11,"syscalls","","Provides the system call interface.",3,[[["self"]],["syscalls"]]],[8,"MessageInfo","","Message information available to the actor about executing…",null,null],[10,"caller","","",4,[[["self"]],["address"]]],[10,"receiver","","",4,[[["self"]],["address"]]],[10,"value_received","","",4,[[["self"]],["tokenamount"]]],[11,"verify_signature","","Verifies that a signature is valid for an address and…",5,[[["address"],["signature"]],[["result",["str"]],["str"]]]],[11,"hash_blake_2b","","Hashes input data using blake2b with 256 bit output.",5,[[]]],[11,"compute_unsealed_sector_cid","","Computes an unsealed sector CID (CommD) from its…",5,[[["registeredproof"]],[["cid"],["str"],["result",["cid","str"]]]]],[11,"verify_seal","","Verifies a sector seal proof.",5,[[["sealverifyinfo"]],[["result",["str"]],["str"]]]],[11,"verify_post","","Verifies a proof of spacetime.",5,[[["postverifyinfo"]],[["result",["str"]],["str"]]]],[11,"verify_consensus_fault","","Verifies that two block headers provide proof of a…",5,[[["chainepoch"]],[["str"],["result",["consensusfault","str"]],["consensusfault"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]]],"p":[[3,"ConsensusFault"],[4,"ConsensusFaultType"],[8,"ActorCode"],[8,"Runtime"],[8,"MessageInfo"],[3,"Syscalls"],[3,"Randomness"]]};
searchIndex["state_manager"] = {"doc":"","i":[[3,"StateManager","state_manager","Intermediary for retrieving state objects and updating…",null,null],[4,"Error","","",null,null],[13,"State","","Error orginating from state",0,null],[13,"KeyValueStore","","Error originating from key-value store",0,null],[11,"new","","constructor",1,[[["arc"]],["self"]]],[11,"miner_slashed","","Returns the epoch at which the miner was slashed at",1,[[["tipset"],["self"],["address"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"miner_sector_size","","Returns the amount of space in each sector committed to…",1,[[["tipset"],["self"],["address"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"get_actor","","",1,[[["tipset"],["self"],["address"]],[["result",["option","error"]],["error"],["option",["actorstate"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",0,[[["dberr"]],["error"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"Error"],[3,"StateManager"]]};
searchIndex["state_tree"] = {"doc":"","i":[[8,"StateTree","state_tree","Interface to allow for the retreival and modification of…",null,null],[10,"get_actor","","Get actor state from an address. Will be resolved to ID…",0,[[["address"],["self"]],[["option",["actorstate"]],["string"],["result",["option","string"]]]]],[10,"set_actor","","Set actor state for an address. Will set state at ID…",0,[[["address"],["self"],["actorstate"]],[["string"],["result",["string"]]]]],[10,"lookup_id","","Get an ID address from any Address",0,[[["address"],["self"]],[["result",["address","string"]],["address"],["string"]]]],[10,"delete_actor","","Delete actor for an address. Will resolve to ID address to…",0,[[["address"],["self"]],[["string"],["result",["string"]]]]],[10,"mutate_actor","","Mutate and set actor state for an Address.",0,[[["address"],["self"],["f"]],[["string"],["result",["string"]]]]],[10,"register_new_address","","Register a new address through the init actor.",0,[[["address"],["self"],["actorstate"]],[["result",["address","string"]],["address"],["string"]]]],[10,"snapshot","","Persist changes to store and return Cid to revert state to.",0,[[["self"]],[["result",["cid","string"]],["cid"],["string"]]]],[10,"revert_to_snapshot","","Revert to Cid returned from `snapshot`",0,[[["cid"],["self"]],[["string"],["result",["string"]]]]],[3,"HamtStateTree","","State tree implementation using hamt",null,null],[11,"new","","",1,[[["s"]],["self"]]],[11,"new_from_root","","Constructor for a hamt state tree given an IPLD store",1,[[["cid"],["s"]],[["result",["string"]],["string"]]]],[11,"store","","Retrieve store reference to modify db.",1,[[["self"]],["s"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"get_actor","","",1,[[["self"],["address"]],[["result",["option","string"]],["string"],["option",["actorstate"]]]]],[11,"set_actor","","",1,[[["actorstate"],["self"],["address"]],[["result",["string"]],["string"]]]],[11,"lookup_id","","",1,[[["self"],["address"]],[["result",["address","string"]],["address"],["string"]]]],[11,"delete_actor","","",1,[[["self"],["address"]],[["result",["string"]],["string"]]]],[11,"mutate_actor","","",1,[[["self"],["f"],["address"]],[["result",["string"]],["string"]]]],[11,"register_new_address","","",1,[[["actorstate"],["self"],["address"]],[["result",["address","string"]],["address"],["string"]]]],[11,"snapshot","","",1,[[["self"]],[["cid"],["result",["cid","string"]],["string"]]]],[11,"revert_to_snapshot","","",1,[[["cid"],["self"]],[["result",["string"]],["string"]]]]],"p":[[8,"StateTree"],[3,"HamtStateTree"]]};
searchIndex["utils"] = {"doc":"","i":[[5,"write_to_file","utils","Writes a string to a specified file. Creates the desired…",null,[[["str"]],["result"]]],[5,"read_file_to_vec","","Read file as a `Vec<u8>`",null,[[["str"]],[["vec",["u8"]],["result",["vec"]]]]],[5,"read_file_to_string","","Read file as a `String`.",null,[[["str"]],[["result",["string"]],["string"]]]],[5,"get_home_dir","","Gets the home directory of the current system. Will return…",null,[[],["string"]]],[5,"read_toml","","Converts a toml file represented as a string to `S`",null,[[["str"]],["result"]]]],"p":[]};
searchIndex["vm"] = {"doc":"","i":[[3,"ActorID","vm","Identifier for Actors, includes builtin and initialized…",null,null],[12,"0","","",0,null],[3,"ActorState","","State of all actor implementations",null,null],[12,"code","","",1,null],[12,"state","","",1,null],[12,"balance","","",1,null],[12,"sequence","","",1,null],[3,"InvocInput","","Input variables for actor method invocation.",null,null],[12,"to","","",2,null],[12,"method","","",2,null],[12,"params","","",2,null],[12,"value","","",2,null],[3,"MethodNum","","Method number indicator for calling actor methods",null,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor methods",null,null],[3,"UnpaddedPieceSize","","Size of a piece in bytes",null,null],[12,"0","","",3,null],[3,"PaddedPieceSize","","Size of a piece in bytes with padding",null,null],[12,"0","","",4,null],[3,"PieceInfo","","",null,null],[12,"size","","Size in nodes. For BLS12-381 (capacity 254 bits), must be…",5,null],[12,"cid","","Content identifier for piece",5,null],[3,"SealVerifyInfo","","",null,null],[3,"PoStVerifyInfo","","",null,null],[3,"TokenAmount","","Wrapper around a big int variable to handle token specific…",null,null],[12,"0","","",6,null],[4,"CodeID","","CodeID is the reference to the code which is attached to…",null,null],[13,"Init","","",7,null],[13,"Cron","","",7,null],[13,"Account","","",7,null],[13,"PaymentChannel","","",7,null],[13,"StoragePower","","",7,null],[13,"StorageMiner","","",7,null],[13,"StorageMarket","","",7,null],[13,"CustomCode","","",7,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution",null,null],[13,"Ok","","",8,null],[13,"SysErrActorNotFound","","Indicates failure to find an actor in the state tree.",8,null],[13,"SysErrActorCodeNotFound","","Indicates failure to find the code for an actor.",8,null],[13,"SysErrInvalidMethod","","Indicates failure to find a method in an actor.",8,null],[13,"SysErrInvalidParameters","","Indicates syntactically invalid parameters for a method.",8,null],[13,"SysErrInsufficientFunds","","Indicates a message sender has insufficient funds for a…",8,null],[13,"SysErrInvalidCallSeqNum","","Indicates a message invocation out of sequence.",8,null],[13,"SysErrOutOfGas","","Indicates message execution (including subcalls) used more…",8,null],[13,"SysErrForbidden","","Indicates a message execution is forbidden for the caller.",8,null],[13,"SysErrorIllegalActor","","Indicates actor code performed a disallowed operation.…",8,null],[13,"SysErrorIllegalArgument","","Indicates an invalid argument passed to a runtime method.",8,null],[13,"SysErrSerialization","","Indicates  an object failed to de/serialize for storage.",8,null],[13,"SysErrorReserved1","","Reserved exit codes, do not use.",8,null],[13,"SysErrorReserved2","","",8,null],[13,"SysErrorReserved3","","",8,null],[13,"SysErrInternal","","Indicates something broken within the VM.",8,null],[13,"ErrIllegalArgument","","Indicates a method parameter is invalid.",8,null],[13,"ErrNotFound","","Indicates a requested resource does not exist.",8,null],[13,"ErrForbidden","","Indicates an action is disallowed.",8,null],[13,"ErrInsufficientFunds","","Indicates a balance of funds is insufficient.",8,null],[13,"ErrIllegalState","","Indicates an actor's internal state is invalid.",8,null],[13,"ErrSerialization","","Indicates de/serialization failure within actor code.",8,null],[13,"ErrPlaceholder","","",8,null],[4,"RegisteredProof","","",null,null],[13,"StackedDRG32GiBSeal","","",9,null],[13,"StackedDRG32GiBPoSt","","",9,null],[13,"StackedDRG2KiBSeal","","",9,null],[13,"StackedDRG2KiBPoSt","","",9,null],[13,"StackedDRG8MiBSeal","","",9,null],[13,"StackedDRG8MiBPoSt","","",9,null],[13,"StackedDRG512MiBSeal","","",9,null],[13,"StackedDRG512MiBPoSt","","",9,null],[11,"new","","Constructor for actor state",1,[[["cid"],["biguint"],["u64"]],["self"]]],[11,"is_builtin","","Returns true if cid is builtin Actor",7,[[["self"]],["bool"]]],[11,"is_singleton","","Returns true if cid is singleton Actor",7,[[["self"]],["bool"]]],[11,"is_success","","returns true if the exit code was a success",8,[[],["bool"]]],[11,"is_error","","returns true if exited with an error code",8,[[],["bool"]]],[11,"allows_state_update","","returns true if the execution was successful",8,[[],["bool"]]],[11,"new","","Constructor for new MethodNum",10,[[["u64"]],["self"]]],[11,"new","","Constructor if data is encoded already",11,[[["vec",["u8"]],["u8"]],["self"]]],[11,"serialize","","Contructor for encoding Cbor encodable structure",11,[[["serialize"]],[["result",["encodingerror"]],["encodingerror"]]]],[11,"bytes","","Returns serialized bytes",11,[[["self"]]]],[11,"deserialize","","Deserializes into a defined type",11,[[["self"]],[["deserializeowned"],["encodingerror"],["result",["encodingerror"]]]]],[11,"padded","","Converts unpadded piece size into padded piece size",3,[[],["paddedpiecesize"]]],[11,"validate","","Validates piece size",3,[[],[["result",["str"]],["str"]]]],[11,"unpadded","","Converts padded piece size into an unpadded piece size",4,[[],["unpaddedpiecesize"]]],[11,"validate","","Validates piece size",4,[[],[["result",["str"]],["str"]]]],[11,"from_byte","","",9,[[["u8"]],["option"]]],[11,"new","","",6,[[["u64"]],["self"]]],[17,"METHOD_SEND","","Base actor send method",null,null],[17,"METHOD_CONSTRUCTOR","","Base actor constructor method",null,null],[8,"StateTree","","Interface to allow for the retreival and modification of…",null,null],[10,"get_actor","","Get actor state from an address. Will be resolved to ID…",12,[[["address"],["self"]],[["option",["actorstate"]],["result",["option","string"]],["string"]]]],[10,"set_actor","","Set actor state for an address. Will set state at ID…",12,[[["self"],["address"],["actorstate"]],[["result",["string"]],["string"]]]],[10,"lookup_id","","Get an ID address from any Address",12,[[["address"],["self"]],[["address"],["string"],["result",["address","string"]]]]],[10,"delete_actor","","Delete actor for an address. Will resolve to ID address to…",12,[[["self"],["address"]],[["result",["string"]],["string"]]]],[10,"mutate_actor","","Mutate and set actor state for an Address.",12,[[["self"],["address"],["f"]],[["result",["string"]],["string"]]]],[10,"register_new_address","","Register a new address through the init actor.",12,[[["self"],["address"],["actorstate"]],[["address"],["string"],["result",["address","string"]]]]],[10,"snapshot","","Persist changes to store and return Cid to revert state to.",12,[[["self"]],[["result",["cid","string"]],["cid"],["string"]]]],[10,"revert_to_snapshot","","Revert to Cid returned from `snapshot`",12,[[["self"],["cid"]],[["result",["string"]],["string"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["actorid"]]],[11,"clone","","",1,[[["self"]],["actorstate"]]],[11,"clone","","",7,[[["self"]],["codeid"]]],[11,"clone","","",8,[[["self"]],["exitcode"]]],[11,"clone","","",10,[[["self"]],["methodnum"]]],[11,"clone","","",11,[[["self"]],["serialized"]]],[11,"clone","","",3,[[["self"]],["unpaddedpiecesize"]]],[11,"clone","","",4,[[["self"]],["paddedpiecesize"]]],[11,"clone","","",9,[[["self"]],["registeredproof"]]],[11,"clone","","",6,[[["self"]],["tokenamount"]]],[11,"default","","",10,[[],["methodnum"]]],[11,"default","","",11,[[],["serialized"]]],[11,"default","","",6,[[],["tokenamount"]]],[11,"eq","","",0,[[["self"],["actorid"]],["bool"]]],[11,"ne","","",0,[[["self"],["actorid"]],["bool"]]],[11,"eq","","",1,[[["self"],["actorstate"]],["bool"]]],[11,"ne","","",1,[[["self"],["actorstate"]],["bool"]]],[11,"eq","","",7,[[["codeid"],["self"]],["bool"]]],[11,"ne","","",7,[[["codeid"],["self"]],["bool"]]],[11,"eq","","",8,[[["exitcode"],["self"]],["bool"]]],[11,"eq","","",10,[[["methodnum"],["self"]],["bool"]]],[11,"ne","","",10,[[["methodnum"],["self"]],["bool"]]],[11,"eq","","",11,[[["serialized"],["self"]],["bool"]]],[11,"ne","","",11,[[["serialized"],["self"]],["bool"]]],[11,"eq","","",3,[[["unpaddedpiecesize"],["self"]],["bool"]]],[11,"ne","","",3,[[["unpaddedpiecesize"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["paddedpiecesize"]],["bool"]]],[11,"ne","","",4,[[["self"],["paddedpiecesize"]],["bool"]]],[11,"eq","","",9,[[["registeredproof"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["tokenamount"]],["bool"]]],[11,"ne","","",6,[[["self"],["tokenamount"]],["bool"]]],[11,"deref","","",11,[[["self"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"add_assign","","",0,[[["self"],["u64"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["s"],["self"]],["result"]]],[11,"serialize","","",4,[[["s"],["self"]],["result"]]],[11,"serialize","","",5,[[["s"],["self"]],["result"]]],[11,"serialize","","",6,[[["s"],["self"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"deserialize","","",10,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"deserialize","","",6,[[["d"]],["result"]]],[11,"from_i64","","",9,[[["i64"]],["option"]]],[11,"from_u64","","",9,[[["u64"]],["option"]]]],"p":[[3,"ActorID"],[3,"ActorState"],[3,"InvocInput"],[3,"UnpaddedPieceSize"],[3,"PaddedPieceSize"],[3,"PieceInfo"],[3,"TokenAmount"],[4,"CodeID"],[4,"ExitCode"],[4,"RegisteredProof"],[3,"MethodNum"],[3,"Serialized"],[8,"StateTree"],[3,"SealVerifyInfo"],[3,"PoStVerifyInfo"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);